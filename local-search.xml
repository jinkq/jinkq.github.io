<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E9%9D%A2%E8%AF%95/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="experience-invest-in-stocks"><a href="#experience-invest-in-stocks" class="headerlink" title="experience invest in stocks"></a>experience invest in stocks</h2><h2 id="what-factor-you-find-is-most-efficent"><a href="#what-factor-you-find-is-most-efficent" class="headerlink" title="what factor you find is most efficent"></a>what factor you find is most efficent</h2><h2 id="experience-in-buying-individual-stock"><a href="#experience-in-buying-individual-stock" class="headerlink" title="experience in buying individual stock"></a>experience in buying individual stock</h2><h2 id="P-x2F-E-low-understanding-of-this-phenomenon-科技公司高，金融企业低（interest-rate-impact，sensitivity-is-different）"><a href="#P-x2F-E-low-understanding-of-this-phenomenon-科技公司高，金融企业低（interest-rate-impact，sensitivity-is-different）" class="headerlink" title="P&#x2F;E low, understanding of this phenomenon, 科技公司高，金融企业低（interest rate impact，sensitivity is different）"></a>P&#x2F;E low, understanding of this phenomenon, 科技公司高，金融企业低（interest rate impact，sensitivity is different）</h2><h2 id="股票和外汇risk-indicator"><a href="#股票和外汇risk-indicator" class="headerlink" title="股票和外汇risk indicator"></a>股票和外汇risk indicator</h2><h2 id="cta-risk-parity-in-equicy-currency-commodity-futures"><a href="#cta-risk-parity-in-equicy-currency-commodity-futures" class="headerlink" title="cta risk parity, in equicy, currency, commodity futures"></a>cta risk parity, in equicy, currency, commodity futures</h2><h2 id="multi-strategies"><a href="#multi-strategies" class="headerlink" title="multi strategies"></a>multi strategies</h2><h2 id="多资产配置叫股债混合型基金uture-period"><a href="#多资产配置叫股债混合型基金uture-period" class="headerlink" title="多资产配置叫股债混合型基金uture period."></a>多资产配置叫股债混合型基金uture period.</h2>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>宏观</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E5%AE%8F%E8%A7%82/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E5%AE%8F%E8%A7%82/</url>
    
    <content type="html"><![CDATA[<h1 id="宏观"><a href="#宏观" class="headerlink" title="宏观"></a>宏观</h1><h2 id="结合当前宏观经济阐述下半年我国宏观经济走向以及资产配置建议"><a href="#结合当前宏观经济阐述下半年我国宏观经济走向以及资产配置建议" class="headerlink" title="结合当前宏观经济阐述下半年我国宏观经济走向以及资产配置建议"></a>结合当前宏观经济阐述下半年我国宏观经济走向以及资产配置建议</h2><h2 id="美联储是否加息，有什么影响"><a href="#美联储是否加息，有什么影响" class="headerlink" title="美联储是否加息，有什么影响"></a>美联储是否加息，有什么影响</h2><h2 id="经济政策和货币政策，三年内的例子，这两种政策怎么被用"><a href="#经济政策和货币政策，三年内的例子，这两种政策怎么被用" class="headerlink" title="经济政策和货币政策，三年内的例子，这两种政策怎么被用"></a>经济政策和货币政策，三年内的例子，这两种政策怎么被用</h2><h2 id="quantitative-easing-machanism"><a href="#quantitative-easing-machanism" class="headerlink" title="quantitative easing machanism"></a>quantitative easing machanism</h2><h2 id="currency-interest-rate-parity"><a href="#currency-interest-rate-parity" class="headerlink" title="currency interest rate parity"></a>currency interest rate parity</h2><h2 id="fundamental-driver-of-currency-change"><a href="#fundamental-driver-of-currency-change" class="headerlink" title="fundamental driver of currency change"></a>fundamental driver of currency change</h2>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>量化</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E9%87%8F%E5%8C%96/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E9%87%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h1><h2 id="量化交易都有哪些主要的策略类型"><a href="#量化交易都有哪些主要的策略类型" class="headerlink" title="量化交易都有哪些主要的策略类型"></a>量化交易都有哪些主要的策略类型</h2><p>Alpha 策略，CTA 策略以及高频交易策略</p>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>衍生品</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E8%A1%8D%E7%94%9F%E5%93%81/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E8%A1%8D%E7%94%9F%E5%93%81/</url>
    
    <content type="html"><![CDATA[<h1 id="衍生品"><a href="#衍生品" class="headerlink" title="衍生品"></a>衍生品</h1><h2 id="期权、债券、互换、远期、期货等金融产品定价"><a href="#期权、债券、互换、远期、期货等金融产品定价" class="headerlink" title="期权、债券、互换、远期、期货等金融产品定价"></a>期权、债券、互换、远期、期货等金融产品定价</h2><h2 id="远期"><a href="#远期" class="headerlink" title="远期"></a>远期</h2><h3 id="从利率的期限结构来看，5-年即期利率为每年-10-，10-年即期利率为每年-15-。那么从第-5-年到第-10年的隐含远期收益率是多少？"><a href="#从利率的期限结构来看，5-年即期利率为每年-10-，10-年即期利率为每年-15-。那么从第-5-年到第-10年的隐含远期收益率是多少？" class="headerlink" title="从利率的期限结构来看，5 年即期利率为每年 10%，10 年即期利率为每年 15%。那么从第 5 年到第 10年的隐含远期收益率是多少？"></a>从利率的期限结构来看，5 年即期利率为每年 10%，10 年即期利率为每年 15%。那么从第 5 年到第 10年的隐含远期收益率是多少？</h3><p>设本金为$x$<br>$$<br>x\cdot(1+10%)^5(1+r)^5&#x3D;x\cdot(1+15%)^{10}<br>$$</p><h3 id="Cost-of-carry"><a href="#Cost-of-carry" class="headerlink" title="Cost of carry"></a>Cost of carry</h3><h2 id="给两个即期利率算远期利率"><a href="#给两个即期利率算远期利率" class="headerlink" title="给两个即期利率算远期利率"></a>给两个即期利率算远期利率</h2><h2 id="期货"><a href="#期货" class="headerlink" title="期货"></a>期货</h2><h3 id="远期和期货的区别"><a href="#远期和期货的区别" class="headerlink" title="远期和期货的区别"></a>远期和期货的区别</h3><h3 id="期货定价五个要素"><a href="#期货定价五个要素" class="headerlink" title="期货定价五个要素"></a>期货定价五个要素</h3><h2 id="期权"><a href="#期权" class="headerlink" title="期权"></a>期权</h2><h3 id="Vanilla-Option"><a href="#Vanilla-Option" class="headerlink" title="Vanilla Option"></a>Vanilla Option</h3><p>最基本的、标准化的欧式期权</p><h3 id="影响期权价格的因素"><a href="#影响期权价格的因素" class="headerlink" title="影响期权价格的因素"></a>影响期权价格的因素</h3><ul><li>price of underlying asset同一条件下，看涨期权价格与标的资产价格呈正比A is proportional to b，看跌期权与之呈反比A is inversely proportional to b。</li><li>strike price执行价格的高低对期权的影响与标的资产相反。</li><li>Price volatility of underlying asset同一条件下，波动率越高的期权价格越高。</li><li>Remaining time before due date同一条件下，有效期越长的期权价格越高。</li><li>risk-free rate期权价格与无风险利率呈反比</li><li>【optional】Income of underlying asset in holding period由于标的资产的分红付息等将降低标的资产的价格，而执行价格并未因此进行相应的调整，因此在期权有效期内，标的资产产生的红利将使看涨期权价格下降，而使看跌期权价格上升（Since the dividend of the underlying asset will decrease the price of the underlying asset, but the strike price has not been adjusted accordingly, the dividend generated by the underlying asset will decrease the price of call options and increase the price of put options during the effective period of the option）</li></ul><h3 id="假设标的资产近期将会出现大波动，市场有一个CALL和一个PUT可供选择，请构建出一个你觉得适合后市的期权套利组合，并画出对应的盈亏图"><a href="#假设标的资产近期将会出现大波动，市场有一个CALL和一个PUT可供选择，请构建出一个你觉得适合后市的期权套利组合，并画出对应的盈亏图" class="headerlink" title="假设标的资产近期将会出现大波动，市场有一个CALL和一个PUT可供选择，请构建出一个你觉得适合后市的期权套利组合，并画出对应的盈亏图"></a>假设标的资产近期将会出现大波动，市场有一个CALL和一个PUT可供选择，请构建出一个你觉得适合后市的期权套利组合，并画出对应的盈亏图</h3><h3 id="波动率"><a href="#波动率" class="headerlink" title="波动率"></a>波动率</h3><h4 id="波动率微笑"><a href="#波动率微笑" class="headerlink" title="波动率微笑"></a>波动率微笑</h4><p>波动率微笑（volatility smile）是指在金融市场上，不同执行价格的期权隐含波动率呈现出不同的形态，通常表现为执行价格远离标的资产现价的期权隐含波动率较高，而执行价格接近标的资产现价的期权隐含波动率较低，呈现出一个微笑的形态。</p><p>波动率微笑是由市场上期权买卖双方对未来市场波动性的不同预期所导致的。在市场中，投资者通常会根据其对未来市场波动性的预期来决定是否购买期权。当投资者预期市场波动性较高时，他们更倾向于购买执行价格远离标的资产现价的期权，以获得更高的潜在收益。因此，这些期权的价格会被市场推高，而其隐含波动率也会较高。相反，当投资者预期市场波动性较低时，他们更倾向于购买执行价格接近标的资产现价的期权，以保证稳定的收益，这些期权的价格则会被市场推低，而其隐含波动率也会较低。</p><p>For options with the same maturity date and underlying assets but different strike prices, the farther the strike price deviates from the spot price of the underlying assets, the greater the implied volatility. In the empirical study, the implied volatility calculated by the traditional BS option pricing model presents a phenomenon called “volatility smile”</p><h4 id="Volatility-skew"><a href="#Volatility-skew" class="headerlink" title="Volatility skew"></a>Volatility skew</h4><p>波动率偏斜（Volatility skew）指的是相同到期日、相同标的资产、相同执行价格的期权，但不同行权价的隐含波动率不同的现象。</p><p>通常情况下，波动率偏斜表现为，执行价格较低的看涨期权的隐含波动率高于执行价格较高的看涨期权的隐含波动率，而执行价格较高的看跌期权的隐含波动率高于执行价格较低的看跌期权的隐含波动率。这是由于投资者对市场上涨的担忧要大于对市场下跌的担忧，因此对于执行价格较低的看涨期权的需求较高，其价格也会相应地被推高，进而导致隐含波动率的上升；相反，对于执行价格较高的看涨期权的需求较低，其价格也会相应地被推低，进而导致隐含波动率的下降。</p><p>波动率偏斜在金融市场中比较常见，特别是在股票市场和外汇市场中。</p><h3 id="BS模型"><a href="#BS模型" class="headerlink" title="BS模型"></a>BS模型</h3><p>布朗运动是一种最简单的连续随机过程，它是描述证券价格随机性的基本模型。而对于期权或其他衍生品这些金融工具，它们的价格是相关证券资产价格的函数。因此可以说<strong>证券价格是一个随机过程，而衍生品价格是该随机过程的函数。伊藤引理提供了对随机过程的函数做微分的框架；这对于衍生品的定价意义非凡</strong>（在此之前，人们是不知道如何对随机过程的函数做微分的）。<strong>通过伊藤引理，可以写出金融衍生品价格的随机微分方程，通过对其求解便可以得到衍生品价格的模型。</strong>BS 公式就是一个最简单的例子。（BS 模型是一个偏微分方程，而 BS 公式是一个解析形式的表达式）</p><h4 id="BS模型假设"><a href="#BS模型假设" class="headerlink" title="BS模型假设"></a>BS模型假设</h4><p>Black-Scholes 期权的价格模型是建立在严格的假设基础上的，包<br>括以下几点：</p><ol><li>期权的标的资产的价格服从几何布朗运动，因此标的资产收<br>益率必须服从对数正态分布。The price of the underlying asset follows geometric Brownian motion, so the return of underlying asset<br>follows the lognormal distribution.</li><li>市场没有摩擦，没有税收和交易成本，没有卖空限制。There is no friction in the market, no tax and transaction costs, and no short position restrictions.</li><li>无风险利率不变。</li><li>期权不能在到期日之前行使，必须是欧式期权expiration date</li></ol><h4 id="为什么black-scholes方程（注意不是bs模型）中一阶项前面是无风险利率r，而不是风险利率（或者历史回报率）u？"><a href="#为什么black-scholes方程（注意不是bs模型）中一阶项前面是无风险利率r，而不是风险利率（或者历史回报率）u？" class="headerlink" title="为什么black scholes方程（注意不是bs模型）中一阶项前面是无风险利率r，而不是风险利率（或者历史回报率）u？"></a>为什么black scholes方程（注意不是bs模型）中一阶项前面是无风险利率r，而不是风险利率（或者历史回报率）u？</h4><p>风险中性定价，u经过测度变换可以得到r</p><p>融资成本所对应的回报率是r，而不是u</p><h4 id="布朗运动"><a href="#布朗运动" class="headerlink" title="布朗运动"></a>布朗运动</h4><p><strong>布朗运动是一个连续随机过程。一个随机过程是定义在时域或者空间域上的依次发生的一系列随机变量的集合。</strong>以时域为例，如果这些随机变量在整个实数时域上都有定义，那么这个随机过程为连续随机过程；反之，如果这些随机变量仅仅在时域上一些离散的点有定义，那么该随机过程为离散随机过程</p><h4 id="风险中性下推导-B-S-公式"><a href="#风险中性下推导-B-S-公式" class="headerlink" title="风险中性下推导 B-S 公式"></a>风险中性下推导 B-S 公式</h4><h4 id="BS公式和BS模型的区别"><a href="#BS公式和BS模型的区别" class="headerlink" title="BS公式和BS模型的区别"></a>BS公式和BS模型的区别</h4><p>BS公式和BS模型的公式基本相同，但是BS模型比BS公式更为复杂，包括了更多的变量和参数。</p><p>下面是BS公式和BS模型的公式：</p><p>BS公式：</p><p>$$C&#x3D;S_tN(d_1)-Ke^{-r(T-t)}N(d_2)$$</p><p>其中，$C$是欧式看涨期权的价格，$S_t$是标的资产的当前价格，$K$是期权的行权价格，$r$是无风险利率，$T-t$是期权到期时间，$N$是标准正态分布的累积分布函数，$d_1$和$d_2$分别为：</p><p>$$d_1&#x3D;\frac{\ln\left(\frac{S_t}{K}\right)+(r+\frac{1}{2}\sigma^2)(T-t)}{\sigma\sqrt{T-t}}$$</p><p>$$d_2&#x3D;d_1-\sigma\sqrt{T-t}$$</p><p>BS模型：</p><p>$$C&#x3D;S_tN(d_1)-Ke^{-r(T-t)}N(d_2)$$</p><p>其中，$C$、$S_t$、$K$、$r$、$T-t$、$N$、$d_1$和$d_2$的含义与BS公式相同，但是BS模型还考虑了标的资产的随机漂移和股息率等因素，因此$d_1$和$d_2$的计算方式略有不同：</p><p>$$d_1&#x3D;\frac{\ln\left(\frac{S_t}{K}\right)+(r+\frac{1}{2}\sigma^2)(T-t)}{\sigma\sqrt{T-t}}+ \frac{b}{\sigma}\sqrt{T-t}$$</p><p>$$d_2&#x3D;d_1-\sigma\sqrt{T-t}$$</p><p>其中，$b$是标的资产的随机漂移率，也称为股息率。可以看出，BS模型在计算$d_1$时多了一个$\frac{b}{\sigma}\sqrt{T-t}$的项。</p><h4 id="optimal-hedge-ratio"><a href="#optimal-hedge-ratio" class="headerlink" title="optimal hedge ratio"></a>optimal hedge ratio</h4><p>最优对冲比率（Optimal hedge ratio）是指在进行期货或期权交易时，用来确定期权头寸与期货头寸之间最佳的数量关系，以达到最小化投资组合风险的比率。</p><p>最优对冲比率是在现实市场情况下计算得出的，通常是通过回归分析等统计方法来确定。该比率表明了在给定期权头寸的情况下，需要持有多少头寸的期货合约才能实现最小化风险的效果。一般来说，最优对冲比率取决于期权的到期日、执行价格、标的资产价格波动率以及市场的流动性等因素。</p><p>最优对冲比率的计算对于期权和期货交易者来说都非常重要。对于期权交易者来说，最优对冲比率可以帮助他们在持有期权的同时，通过期货合约对价格波动的风险进行对冲，从而减小投资组合的风险；对于期货交易者来说，最优对冲比率可以帮助他们确定多空头寸之间的最佳数量关系，以达到最小化风险的效果</p><h5 id="期货最优对冲比率的计算"><a href="#期货最优对冲比率的计算" class="headerlink" title="期货最优对冲比率的计算"></a>期货最优对冲比率的计算</h5><p>期货最优对冲比率是指在持有期货合约的同时，持有多少的标的资产才能实现最小化风险的效果。最优对冲比率的计算需要使用线性回归方法，即将标的资产价格的变动作为自变量，将期货合约价格的变动作为因变量，通过回归分析来确定最优对冲比率。</p><p>具体而言，计算过程如下：</p><ol><li>收集一段时间内标的资产和期货合约的价格数据。</li><li>将标的资产价格的变动作为自变量，将期货合约价格的变动作为因变量，进行线性回归分析。</li><li>计算回归系数，即标的资产价格变动对期货合约价格变动的敏感度，得到最优对冲比率。</li></ol><p>例如，假设投资者持有原油期货合约，并且持有1000桶原油的现货头寸。通过分析历史数据，计算出最优对冲比率为0.8。则投资者需要持有800桶原油的现货头寸，才能实现最小化风险的效果。</p><h5 id="期权最优对冲比率的计算"><a href="#期权最优对冲比率的计算" class="headerlink" title="期权最优对冲比率的计算"></a>期权最优对冲比率的计算</h5><p>期权最优对冲比率是指在持有期权的同时，持有多少的标的资产才能实现最小化风险的效果。最优对冲比率的计算需要使用风险中性定价方法，即将标的资产价格的变动作为风险因素，通过期权的定价公式来计算最优对冲比率。</p><p>具体而言，计算过程如下：</p><ol><li>确定期权的到期日、执行价格和类型，以及标的资产的价格和波动率等参数。</li><li>根据期权的定价公式，计算出期权的理论价格。</li><li>通过偏导数公式计算期权价格对标的资产价格的敏感度，即Delta值。</li><li>计算最优对冲比率，即期权持有人需要持有多少的标的资产才能实现最小化风险的效果，即最优对冲比率等于Delta值除以标的资产价格的变动量。</li></ol><p>例如，假设投资者持有某只股票的看涨期权，执行价格为100元，到期日为三个月后，标的资产价格为110元，波动率为20%。通过期权定价公式计算出期权价格为6元。偏导数公式计算出Delta值为0.65。则最优对冲比率为0.65&#x2F;10&#x3D;0.065，即投资者需要持有15.38股标的资产，才能实现最小化风险的效果。</p><h4 id="Martingale基础知识"><a href="#Martingale基础知识" class="headerlink" title="Martingale基础知识"></a>Martingale基础知识</h4><p>在概率论和数学金融中，Martingale是一种随机过程，通常用于描述一个随机变量序列的演变。Martingale序列的一个重要特点是其在未来的预期值等于当前的值。这个性质被称为“无偏增长”或者“无记忆性”。</p><p>换句话说，如果一系列随机变量X1, X2, …, Xt是Martingale序列，那么在给定任何t时刻，我们可以预期Xt的未来值与当前的值相等。这个特性可以表示为：</p><p>E(Xt+1 | X1, X2, …, Xt) &#x3D; Xt</p><p>其中，E表示期望值。这个等式意味着，假设我们已经知道了当前时刻的随机变量值，那么下一时刻的期望值就等于当前的值。</p><p>Martingale序列通常用于研究随机过程的特性和性质，例如在金融领域，Martingale序列可以被用来描述股票价格的随机变化。如果一支股票价格的随机漂移是一个Martingale序列，那么其价格的期望值在任何时刻都应该等于当前价格，即股票价格不存在趋势或者偏差，是随机游走的。</p><p>在数学金融中，Martingale序列也可以用于衡量金融衍生品的价格。如果一个金融衍生品的价格符合Martingale序列的性质，那么在风险中性世界中，该衍生品的价格应该等于其期望收益的贴现值，即其价格应该等于其未来收益的期望值。这个性质被称为“风险中性定价法”，是金融衍生品定价的基本原理之一。</p><h3 id="期权价格-amp-期权价值"><a href="#期权价格-amp-期权价值" class="headerlink" title="期权价格 &amp; 期权价值"></a>期权价格 &amp; 期权价值</h3><p>期权价格和期权价值的关系是：期权价格等于期权内在价值和时间价值的总和，也就是期权价值。如果期权内在价值为负，那么期权的价格就等于时间价值。如果期权内在价值为正，那么期权的价格就等于内在价值加上时间价值。</p><h3 id="各种option-strategy"><a href="#各种option-strategy" class="headerlink" title="各种option strategy"></a>各种option strategy</h3><h4 id="Brownian-Motion"><a href="#Brownian-Motion" class="headerlink" title="Brownian Motion"></a>Brownian Motion</h4><ul><li>Ito Lemma</li><li>判断组合是不是marting’</li></ul><h4 id="BS-Formula公式和基本假设"><a href="#BS-Formula公式和基本假设" class="headerlink" title="BS Formula公式和基本假设"></a>BS Formula公式和基本假设</h4><h4 id="BS-Merton-Formula推导"><a href="#BS-Merton-Formula推导" class="headerlink" title="BS Merton Formula推导"></a>BS Merton Formula推导</h4><p>两种推导，一种是replication，一种是option+stock组合成risk-free portfolio（后者更被preferred）</p><h3 id="Put-Call-Parity"><a href="#Put-Call-Parity" class="headerlink" title="Put-Call Parity"></a>Put-Call Parity</h3><p>可以用来解释call由put，time value和intrisic value构成</p><h2 id="Binomial-Model"><a href="#Binomial-Model" class="headerlink" title="Binomial Model"></a>Binomial Model</h2><p>$c&#x3D;\pi_uc_u+\pi_dc_d$</p><h3 id="Realized-vol和im-vol"><a href="#Realized-vol和im-vol" class="headerlink" title="Realized vol和im vol"></a>Realized vol和im vol</h3><ul><li>各自的定义</li><li>两者的区别</li></ul><p>实现波动率（Realized Volatility）和隐含波动率（Implied Volatility）是衡量金融市场波动性的两个重要指标，二者的区别如下：</p><ol><li>实现波动率是根据历史数据计算的波动率，是过去某一段时间内实际价格的波动程度的测度。而隐含波动率是根据市场上对期权价格的交易计算得到的，是市场对未来波动率的预期的测度。</li><li>实现波动率是基于历史数据计算的，其计算方法可以有多种，比如对数收益率、价格变动率等。而隐含波动率是根据期权的市场价格和其他参数，使用期权定价模型计算得到的。</li><li>实现波动率是已知的，因为历史价格已经发生了，而隐含波动率是未知的，因为它是根据市场价格反推出来的。</li><li>实现波动率反映了市场实际的波动程度，而隐含波动率反映了市场对未来波动率的预期。实现波动率可以帮助投资者评估风险，而隐含波动率可以帮助投资者评估期权价格的合理性以及市场对未来波动率的看法。</li><li>实现波动率通常用于构建波动率交易策略，而隐含波动率通常用于期权定价和风险管理。</li></ol><h3 id="im-vol-surface特点"><a href="#im-vol-surface特点" class="headerlink" title="im vol surface特点"></a>im vol surface特点</h3><h3 id="Local-Vol模型"><a href="#Local-Vol模型" class="headerlink" title="Local Vol模型"></a>Local Vol模型</h3><ul><li>由Dupire拟合</li><li>Pros &amp; cons，还问过和原来BS Model的区别</li></ul><h3 id="Heston-Model"><a href="#Heston-Model" class="headerlink" title="Heston Model"></a>Heston Model</h3><h3 id="Dynamic-hedge-amp-static-hedge"><a href="#Dynamic-hedge-amp-static-hedge" class="headerlink" title="Dynamic hedge &amp; static hedge"></a>Dynamic hedge &amp; static hedge</h3><h3 id="奇异期权"><a href="#奇异期权" class="headerlink" title="奇异期权"></a>奇异期权</h3><h4 id="亚式期权的定价"><a href="#亚式期权的定价" class="headerlink" title="亚式期权的定价"></a>亚式期权的定价</h4><ul><li>Rainbow<ul><li>Corr &amp; option price的关系</li><li>Snowball</li><li>Accumulator</li></ul></li></ul><h3 id="Greek"><a href="#Greek" class="headerlink" title="Greek"></a>Greek</h3><table><thead><tr><th>Greek</th><th>Call</th><th>Put</th></tr></thead><tbody><tr><td>Delta($\frac{\partial}{\partial S_t}$)</td><td>$\phi(d_1)$</td><td>$-\phi(-d_1)$</td></tr><tr><td>Gamma($\frac{\partial^2}{\partial S_t^2}$)</td><td>$\frac{\phi(d_1)}{S_t\sigma\sqrt{\tau}}&#x3D;Ke^{-r\tau}\frac{\phi(d_2)}{S_t^2\sigma\sqrt{\tau}}$</td><td>同Call</td></tr><tr><td>Vega($\frac{\partial}{\partial \sigma}$)</td><td>$S_t\tau\psi(d_1)&#x3D;Ke^{-r\tau}\sqrt{\tau}\phi(d_2)$</td><td>同Call</td></tr><tr><td>Theta($\frac{\partial}{\partial t}$)</td><td>$-Ke^{-r\tau}\phi(d_2)-\frac{S_t\phi(d_1)\sigma}{2\sqrt{\tau}}$</td><td>$Ke^{-r\tau}\phi(-d_2)-\frac{S_t\phi(d_1)\sigma}{2\sqrt{\tau}}$</td></tr><tr><td>Rho($\frac{\partial}{\partial r}$)</td><td>$K\tau e^{-r\tau}\phi(d_2)$</td><td>$-K\tau e^{-r\tau}\phi(-d_2)$</td></tr></tbody></table><p>delta：call option为正，put option为负</p><p>gamma：多头一定为正</p><p>vega：多头为正，空头为负</p><h4 id="高阶Greek-formula"><a href="#高阶Greek-formula" class="headerlink" title="高阶Greek formula"></a>高阶Greek formula</h4><h5 id="Vanna"><a href="#Vanna" class="headerlink" title="Vanna"></a>Vanna</h5><p>$$<br>Vanna&#x3D;\frac{\partial^2 V}{\partial S \partial \sigma}&#x3D;\frac{\partial \varDelta}{\partial \sigma}<br>$$</p><p>Vanna衡量的是标的资产价格和波动率之间的敏感度，也就是当标的资产价格和波动率同时变化时，期权价格的变化量。</p><h5 id="Vomma"><a href="#Vomma" class="headerlink" title="Vomma"></a>Vomma</h5><p>$$<br>Vomma&#x3D;\frac{\partial^2 V}{\partial \sigma^2}&#x3D;\frac{\partial Vega}{\partial \sigma}<br>$$</p><p>Vomma衡量的是波动率对期权价格的敏感度，也就是当波动率变化时，期权价格的变化量。Vomma的具体定义是，对于一个持有期权头寸的投资者，当波动率变动一个单位时，Vega值的变化量。如果Vomma值为正，那么当波动率上涨时，期权价格也会上涨，反之则会下跌。</p><h4 id="Greek-formula的问题"><a href="#Greek-formula的问题" class="headerlink" title="Greek formula的问题"></a>Greek formula的问题</h4><ul><li>ITM&#x2F;ATM&#x2F;OTM delta的数值<ul><li>ITM期权的Delta数值为正数，接近于1；</li><li>ATM期权的Delta数值接近于0，可能略有正数或负数；</li><li>OTM期权的Delta数值为负数，接近于0。</li></ul></li><li>ATM delta略大于0.5的原因</li><li>类似call&#x2F;put的Gamma，Vega公式的区别</li><li>delta of at the money call option</li></ul><h4 id="Hedge"><a href="#Hedge" class="headerlink" title="Hedge"></a>Hedge</h4><p>delta hedge和gamma hedge risk</p><p>一个银行卖出100 put option, strike price 3700， 算怎么delta hedge</p><h4 id="Greek扩展问题"><a href="#Greek扩展问题" class="headerlink" title="Greek扩展问题"></a>Greek扩展问题</h4><p>做空call各类greek的方向</p><p>delta的衍生含义，e.g. ITM probability, binary option price</p><p>gamma的衍生含义</p><p>gamma和vega的区别</p><p>各类greek关于T, K, S变化的关系</p><p>e.g. ATM处，T越小，gamma越大</p><p>gamma&#x2F;vega关系，gamma&#x2F;theta关系</p><h5 id="各种greek之间可能的互相作用"><a href="#各种greek之间可能的互相作用" class="headerlink" title="各种greek之间可能的互相作用"></a>各种greek之间可能的互相作用</h5><p>各种Greek值代表了期权价格对不同因素的敏感程度，它们之间可能存在互相作用的关系，如下所示：</p><ol><li>Delta和Gamma：Delta值表示期权价格对标的资产价格变化的敏感程度，Gamma值则表示Delta值对标的资产价格变化的敏感程度。当Gamma值较高时，Delta值可能会剧烈变化，因此Delta和Gamma值之间存在密切关系。</li><li>Delta和Theta：Delta值对时间的敏感程度较低，而Theta值则表示期权价格随时间流逝而减少的速度。当期权到期时间越来越近时，Delta值可能会变化，因此Delta和Theta值之间也存在一定的关系。</li><li>Vega和Theta：Vega值表示期权价格对波动率变化的敏感程度，而Theta值则表示期权价格随时间流逝而减少的速度。当随着时间的推移，波动率逐渐减小，Vega值可能会下降，从而影响到Theta值的变化。</li><li>Vega和Gamma：Vega值也表示期权价格对波动率变化的敏感程度，而Gamma值则表示Delta值对标的资产价格变化的敏感程度。当波动率变化时，Gamma值可能会发生变化，进而影响到Delta值和期权价格的变化。</li></ol><h5 id="人们怎么用Greek，为什么重要"><a href="#人们怎么用Greek，为什么重要" class="headerlink" title="人们怎么用Greek，为什么重要"></a>人们怎么用Greek，为什么重要</h5><p>人们可以通过Greek值来评估期权价格和标的资产价格变化、波动率变化以及时间流逝对期权价格的影响程度，从而更好地进行风险管理和投资决策。</p><p>以下是Greek值的具体用途：</p><ol><li>Delta值：Delta值可以帮助投资者确定期权价格对标的资产价格变化的敏感程度。投资者可以通过调整Delta值，来进行动态对冲和风险管理。</li><li>Gamma值：Gamma值表示Delta值对标的资产价格变化的敏感程度。投资者可以利用Gamma值来调整Delta值，以便更好地进行风险管理。</li><li>Vega值：Vega值表示期权价格对波动率变化的敏感程度。投资者可以通过调整Vega值，来控制风险敞口和波动率风险。</li><li>Theta值：Theta值表示期权价格随时间流逝而减少的速度。投资者可以利用Theta值来管理时间价值和期权到期日的风险。</li></ol><p>Greek值在风险管理和投资决策中具有重要作用，能够帮助投资者更好地控制风险和获得收益。</p><h4 id="greek在不同strategy上的表现"><a href="#greek在不同strategy上的表现" class="headerlink" title="greek在不同strategy上的表现"></a>greek在不同strategy上的表现</h4><p>Greek值在不同策略上的表现会有所不同。以下是一些常见的期权交易策略以及它们与Greek值之间的关系：</p><ol><li>Delta中性策略：Delta中性策略旨在通过对冲Delta风险来获得收益。这些策略通常涉及同时买入或卖出期权和标的资产，并根据标的资产价格的变化调整Delta值。在这种情况下，Delta值是策略中最重要的Greek值之一。</li><li>Gamma scalping策略：Gamma scalping策略旨在通过利用Gamma值来获得收益。这些策略通常涉及买入或卖出期权，以利用Gamma值的增加或减少，同时对冲Delta风险。在这种情况下，Gamma值是策略中最重要的Greek值之一。</li><li>Vega交易策略：Vega交易策略旨在通过利用波动率的变化来获得收益。这些策略通常涉及买入或卖出期权，以利用Vega值的增加或减少。在这种情况下，Vega值是策略中最重要的Greek值之一。</li><li>时间价值策略：时间价值策略旨在通过利用时间价值的变化来获得收益。这些策略通常涉及买入或卖出期权，以利用Theta值的增加或减少。在这种情况下，Theta值是策略中最重要的Greek值之一。</li></ol><p>总之，每种策略对Greek值的依赖程度是不同的，因此在选择策略时需要考虑Greek值。同时，需要注意的是，不同Greek值之间的交互作用也可能影响策略的表现。</p><ul><li>long gamma long theta, long gamma short vega</li></ul><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912105717.png"></p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h5 id="delta和underlying-price，用vanilla-call-example"><a href="#delta和underlying-price，用vanilla-call-example" class="headerlink" title="delta和underlying price，用vanilla call example"></a>delta和underlying price，用vanilla call example</h5><h5 id="什么情况下希望sell-the-gamma，用什么option-structure：short-a-call-and-put-at-the-same-time"><a href="#什么情况下希望sell-the-gamma，用什么option-structure：short-a-call-and-put-at-the-same-time" class="headerlink" title="什么情况下希望sell the gamma，用什么option structure：short a call and put at the same time"></a>什么情况下希望sell the gamma，用什么option structure：short a call and put at the same time</h5><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912111629.png"></p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912113154.png"></p><h2 id="互换"><a href="#互换" class="headerlink" title="互换"></a>互换</h2><h3 id="利率互换"><a href="#利率互换" class="headerlink" title="利率互换"></a>利率互换</h3><h3 id="如果买了国债，怎么用swap来hedge"><a href="#如果买了国债，怎么用swap来hedge" class="headerlink" title="如果买了国债，怎么用swap来hedge"></a>如果买了国债，怎么用swap来hedge</h3>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>固收</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E5%9B%BA%E6%94%B6/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E5%9B%BA%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="固收"><a href="#固收" class="headerlink" title="固收"></a>固收</h1><h2 id="给出每期的现金流和即期利率，求出债券价格和久期"><a href="#给出每期的现金流和即期利率，求出债券价格和久期" class="headerlink" title="给出每期的现金流和即期利率，求出债券价格和久期"></a>给出每期的现金流和即期利率，求出债券价格和久期</h2><h2 id="债券的“yield”和“rate-of-return”的区别"><a href="#债券的“yield”和“rate-of-return”的区别" class="headerlink" title="债券的“yield”和“rate of return”的区别"></a>债券的“yield”和“rate of return”的区别</h2><p>债券的“yield”是“internal rate of return”或“yield-to-maturity”或“promised- yield”。如果你持有债券到期，那就是你的收入。</p><p>债券的“rate of return”是已实现现金流的内部收益率对持有者，如果债券在到期日之前出售，（已实现的）“rate of return”可以为正，可以为负。</p><p>假设你购买了一份promised 5%的债券如果你卖掉该债券，你的资本将受损失并且得到一个负的“rate of return”。然而，如果你持有债券直至到期，你将会得到promised 5%</p><h2 id="怎么measure-fix-income-product-bond-interest-rate-swap"><a href="#怎么measure-fix-income-product-bond-interest-rate-swap" class="headerlink" title="怎么measure fix income product(bond, interest rate swap)"></a>怎么measure fix income product(bond, interest rate swap)</h2><h2 id="carry-of-a-bond-coupun-financing-rate"><a href="#carry-of-a-bond-coupun-financing-rate" class="headerlink" title="carry of a bond(coupun - financing rate)"></a>carry of a bond(coupun - financing rate)</h2><h2 id="rho-of-a-bond-yield-curve"><a href="#rho-of-a-bond-yield-curve" class="headerlink" title="rho of a bond(yield curve)"></a>rho of a bond(yield curve)</h2><h2 id="diff-between-stock-bond-and-credit-bond"><a href="#diff-between-stock-bond-and-credit-bond" class="headerlink" title="diff between stock bond and credit bond"></a>diff between stock bond and credit bond</h2><h2 id="micro-driver-of-bond-privacy"><a href="#micro-driver-of-bond-privacy" class="headerlink" title="micro driver of bond privacy"></a>micro driver of bond privacy</h2><h2 id="inflation-data-soran-bond"><a href="#inflation-data-soran-bond" class="headerlink" title="inflation data soran bond"></a>inflation data soran bond</h2><h2 id="国债市场基本面"><a href="#国债市场基本面" class="headerlink" title="国债市场基本面"></a>国债市场基本面</h2>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>定量计算</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E5%AE%9A%E9%87%8F%E8%AE%A1%E7%AE%97/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E5%AE%9A%E9%87%8F%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="定量计算"><a href="#定量计算" class="headerlink" title="定量计算"></a>定量计算</h1><h2 id="如果一只股票每年连续复利收益率的标准差是10-，那么连续复利4年股票收益率的标准差是多少"><a href="#如果一只股票每年连续复利收益率的标准差是10-，那么连续复利4年股票收益率的标准差是多少" class="headerlink" title="如果一只股票每年连续复利收益率的标准差是10%，那么连续复利4年股票收益率的标准差是多少"></a>如果一只股票每年连续复利收益率的标准差是10%，那么连续复利4年股票收益率的标准差是多少</h2><p>假设连续复利收益率遵循布朗运动算法，收益的方差与复利计算期呈线性增长。这是因为随机游走中的连续回报是有限的。而独立随机变量喝的方差的和就是方差的和。这意味着4年的 σ2 等于1年 σ2 的4倍。因此，4年的 σ 是1年 σ 的2倍，因此，答案就是20%。</p><h2 id="2-stock-expected-10-vol-is-10-corr-is-16-construct-portfolio-to-achieve-min-variance"><a href="#2-stock-expected-10-vol-is-10-corr-is-16-construct-portfolio-to-achieve-min-variance" class="headerlink" title="2 stock expected 10%, vol is 10%, corr is 16%, construct portfolio to achieve min variance"></a>2 stock expected 10%, vol is 10%, corr is 16%, construct portfolio to achieve min variance</h2><h2 id="VaR"><a href="#VaR" class="headerlink" title="VaR"></a>VaR</h2><p>Under a certain confidence level, the maximum possible loss of a certain financial asset or portfolio value in a specific future period.</p>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回测</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E5%9B%9E%E6%B5%8B/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E5%9B%9E%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="回测"><a href="#回测" class="headerlink" title="回测"></a>回测</h1><h2 id="常见指标"><a href="#常见指标" class="headerlink" title="常见指标"></a>常见指标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 年化收益率</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">annualized_return</span>(<span class="hljs-params">nav</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(nav[-<span class="hljs-number">1</span>] / nav[<span class="hljs-number">0</span>], <span class="hljs-number">250</span> / <span class="hljs-built_in">len</span>(nav)) - <span class="hljs-number">1</span><br><span class="hljs-comment"># 年化波动率</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">annualized_vol</span>(<span class="hljs-params">nav</span>):<br>    <span class="hljs-keyword">return</span> nav.pct_change().dropna().std() * np.sqrt(<span class="hljs-number">250</span>)<br><span class="hljs-comment"># 年化夏普比率</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sharp_ratio</span>(<span class="hljs-params">nav</span>):<br>    <span class="hljs-keyword">return</span> annualized_return(nav) / annualized_vol(nav)<br><span class="hljs-comment"># 最大回撤</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">max_drawdown</span>(<span class="hljs-params">nav</span>):<br>    drawdown = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nav)):<br>        cur_drawdown = nav[index] / <span class="hljs-built_in">max</span>(nav[<span class="hljs-number">0</span>:index]) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> cur_drawdown &gt; drawdown:<br>            drawdown = cur_drawdown<br>    <span class="hljs-keyword">return</span> drawdown<br></code></pre></td></tr></table></figure><h3 id="turnover"><a href="#turnover" class="headerlink" title="turnover"></a>turnover</h3><h3 id="heater-ratio"><a href="#heater-ratio" class="headerlink" title="heater ratio"></a>heater ratio</h3><p>收益率为正的1</p>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>金融经济</title>
    <link href="/2023/03/03/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    <url>/2023/03/03/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="金融经济"><a href="#金融经济" class="headerlink" title="金融经济"></a>金融经济</h1><h2 id="Alpha-Beta"><a href="#Alpha-Beta" class="headerlink" title="Alpha, Beta"></a>Alpha, Beta</h2><ul><li>alpha: For unsystematic risk, Alpha is the return that investors get unrelated to market fluctuations. It is generally used to measure investors’ investment skills.</li><li>beta: It represents the systematic risk of investment, reflecting the sensitivity of the strategy to changes in the overall market.</li></ul><h2 id="CAPM"><a href="#CAPM" class="headerlink" title="CAPM"></a>CAPM</h2><ul><li>缺陷</li></ul><h2 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h2><h2 id="Fama-French"><a href="#Fama-French" class="headerlink" title="Fama-French"></a>Fama-French</h2><h2 id="Barra模型"><a href="#Barra模型" class="headerlink" title="Barra模型"></a>Barra模型</h2><h2 id="什么是混沌理论？可以用它来预测股票收益率吗？如果可以，请说明为什么？"><a href="#什么是混沌理论？可以用它来预测股票收益率吗？如果可以，请说明为什么？" class="headerlink" title="什么是混沌理论？可以用它来预测股票收益率吗？如果可以，请说明为什么？"></a>什么是混沌理论？可以用它来预测股票收益率吗？如果可以，请说明为什么？</h2><p>第一问：大家可以百度出很多内容，这里不过多陈述。</p><p>第二问：如果你想预测股票收益率，建议你使用神经网络或者其他非线性模型。混论理论在自然科学中是伟大的，但它在金融中却是失败的</p><h2 id="系统性风险和非系统性风险"><a href="#系统性风险和非系统性风险" class="headerlink" title="系统性风险和非系统性风险"></a>系统性风险和非系统性风险</h2><p>Systematic risk refers to those risk factors that can affect the whole financial market, including economic cycle, changes in national macroeconomic policies, etc. Such risks cannot be offset or weakened by diversification. </p><p>Non systematic risk is a risk related to a specific company or industry, and it has nothing to do with economic, political and other factors that affect all financial variables. By diversifying investment, non systematic risks can be reduced, and if diversification is sufficient and effective, such risks can also be eliminated.</p>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Brain Teasers</title>
    <link href="/2023/03/03/%E6%95%B0%E5%AD%A6/Brain%20Teasers/"/>
    <url>/2023/03/03/%E6%95%B0%E5%AD%A6/Brain%20Teasers/</url>
    
    <content type="html"><![CDATA[<h1 id="Brain-Teasers"><a href="#Brain-Teasers" class="headerlink" title="Brain Teasers"></a>Brain Teasers</h1><h2 id="你在一个战场上看守着-100个凶手，而你的枪只有一颗子弹。如果任何一个凶手的生还几率不是零，他就会试图逃跑。如果凶手确已死亡，他就不会企图逃跑。你如何阻止他们逃跑"><a href="#你在一个战场上看守着-100个凶手，而你的枪只有一颗子弹。如果任何一个凶手的生还几率不是零，他就会试图逃跑。如果凶手确已死亡，他就不会企图逃跑。你如何阻止他们逃跑" class="headerlink" title="你在一个战场上看守着 100个凶手，而你的枪只有一颗子弹。如果任何一个凶手的生还几率不是零，他就会试图逃跑。如果凶手确已死亡，他就不会企图逃跑。你如何阻止他们逃跑?"></a>你在一个战场上看守着 100个凶手，而你的枪只有一颗子弹。如果任何一个凶手的生还几率不是零，他就会试图逃跑。如果凶手确已死亡，他就不会企图逃跑。你如何阻止他们逃跑?</h2><h2 id="100-人排队登上一架正好有-100-个座位的飞机。每位乘客都有一张分配到特定座位的机票。第一个上车的人喝醉了，随便找了个座位坐下。其余的旅客如果发现分配给他们的座位是空的，就会坐进去。如果他们发现自己的座位有人坐，他们会随机选择一个座位。大家都上了车，都坐好了。最后一个登机人坐在指定座位上的概率是多少"><a href="#100-人排队登上一架正好有-100-个座位的飞机。每位乘客都有一张分配到特定座位的机票。第一个上车的人喝醉了，随便找了个座位坐下。其余的旅客如果发现分配给他们的座位是空的，就会坐进去。如果他们发现自己的座位有人坐，他们会随机选择一个座位。大家都上了车，都坐好了。最后一个登机人坐在指定座位上的概率是多少" class="headerlink" title="100 人排队登上一架正好有 100 个座位的飞机。每位乘客都有一张分配到特定座位的机票。第一个上车的人喝醉了，随便找了个座位坐下。其余的旅客如果发现分配给他们的座位是空的，就会坐进去。如果他们发现自己的座位有人坐，他们会随机选择一个座位。大家都上了车，都坐好了。最后一个登机人坐在指定座位上的概率是多少?"></a>100 人排队登上一架正好有 100 个座位的飞机。每位乘客都有一张分配到特定座位的机票。第一个上车的人喝醉了，随便找了个座位坐下。其余的旅客如果发现分配给他们的座位是空的，就会坐进去。如果他们发现自己的座位有人坐，他们会随机选择一个座位。大家都上了车，都坐好了。最后一个登机人坐在指定座位上的概率是多少?</h2><p>令$p_n$为n个人坐在指定座位上的概率。要确定$p_{100}$。设A为最后一个人坐在自己座位上的事件，$B_i$为当还有i个座位时上车的人选择的座位号。遵循1到i的离散均匀分布，因此$P(B_i &#x3D; k) &#x3D; \frac{1}{i}$，因为有i个座位，人们随机选择一个。从n&#x3D;1的情况开始</p><h2 id="100-的阶乘（100-）后面有多少个零？"><a href="#100-的阶乘（100-）后面有多少个零？" class="headerlink" title="100 的阶乘（100!）后面有多少个零？"></a>100 的阶乘（100!）后面有多少个零？</h2><p>因为10&#x3D;2$\times$5，所以0的个数就是100!因式分解后2$\times$5（必须配对）的个数。显然因式分解中2的个数比5多，因此问题划归为5的个数决定了后面0的数量。先来数5因子有几个：在100 内，5作为因子的数有5, 10, 15, 20, 25… 总共有20个。但是注意到25, 50, 75, 100都包含了2个5作为因子（25&#x3D;1$\times$5$\times$5, 50&#x3D;2$\times$5$\times$5等）。因此对于这些数要多数一次。所以总共就是有24个5因子，100!后面有24个0。</p><h2 id="来自不同银行的-8-位宽客聚在一起喝酒。他们都想知道在坐-8-个人的平均工资。然而，每个人都不愿意向其他人透露自己的薪水。你能想出一个策略让这-8-个人在不知道别人薪水的情况下计算出在座各位稍微平均工资吗？"><a href="#来自不同银行的-8-位宽客聚在一起喝酒。他们都想知道在坐-8-个人的平均工资。然而，每个人都不愿意向其他人透露自己的薪水。你能想出一个策略让这-8-个人在不知道别人薪水的情况下计算出在座各位稍微平均工资吗？" class="headerlink" title="来自不同银行的 8 位宽客聚在一起喝酒。他们都想知道在坐 8 个人的平均工资。然而，每个人都不愿意向其他人透露自己的薪水。你能想出一个策略让这 8 个人在不知道别人薪水的情况下计算出在座各位稍微平均工资吗？"></a>来自不同银行的 8 位宽客聚在一起喝酒。他们都想知道在坐 8 个人的平均工资。然而，每个人都不愿意向其他人透露自己的薪水。你能想出一个策略让这 8 个人在不知道别人薪水的情况下计算出在座各位稍微平均工资吗？</h2><p>让第1个宽客选择一个随机数a，把这个随机数加到他的工资中，假设这个数是b。第2个宽客把他自己的工资加到b中，按照这个方法，依次到第8个宽客，假设最后结果是c，同时第八个宽客把结果c再给到第一个宽客手中。然后第一个宽客从c中减去a得到d，最后将d除以8，就得到了大家的平均工资。</p><h2 id="一栋大楼有三部电梯，你怎么安排这三部电梯是这个大楼各楼层的人都能最快的按到自己想要的电梯"><a href="#一栋大楼有三部电梯，你怎么安排这三部电梯是这个大楼各楼层的人都能最快的按到自己想要的电梯" class="headerlink" title="一栋大楼有三部电梯，你怎么安排这三部电梯是这个大楼各楼层的人都能最快的按到自己想要的电梯"></a>一栋大楼有三部电梯，你怎么安排这三部电梯是这个大楼各楼层的人都能最快的按到自己想要的电梯</h2><h2 id="e-pi-和-pi-e-哪个大"><a href="#e-pi-和-pi-e-哪个大" class="headerlink" title="$e^\pi$和$\pi^e$哪个大"></a>$e^\pi$和$\pi^e$哪个大</h2><p>两边取对数<br>$$<br>a&#x3D;lne^\pi&#x3D;\pi\<br>b&#x3D;ln\pi ^e&#x3D;eln\pi<br>$$<br>构造函数<br>$$<br>f(x)&#x3D;x-elnx<br>$$<br>令<br>$$<br>f’(x)&#x3D;1-\frac{e}{x}&#x3D;0<br>$$<br>则<br>$$<br>x&#x3D;e为极小值点<br>$$<br>而$\pi&gt;e$，所以$e^\pi&gt;\pi^e$</p><h2 id="你在一个木板的x位置，5是末端，0是起点，每次你有一半概率向左走或向右走，问最终走到末端的概率"><a href="#你在一个木板的x位置，5是末端，0是起点，每次你有一半概率向左走或向右走，问最终走到末端的概率" class="headerlink" title="你在一个木板的x位置，5是末端，0是起点，每次你有一半概率向左走或向右走，问最终走到末端的概率"></a>你在一个木板的x位置，5是末端，0是起点，每次你有一半概率向左走或向右走，问最终走到末端的概率</h2><h2 id="如果-x-land-x-land-x-land-…-x3D-2-，求-x"><a href="#如果-x-land-x-land-x-land-…-x3D-2-，求-x" class="headerlink" title="如果$x\land x\land x\land …&#x3D;2$，求$x$"></a>如果$x\land x\land x\land …&#x3D;2$，求$x$</h2><p>$$<br>\underset{n\rightarrow \infty}{\lim}\frac{x\land x\land x\land …}{n}&#x3D;2 \Leftrightarrow \underset{n\rightarrow \infty}{\lim}\frac{x\land x\land x\land …}{n-1}&#x3D;2<br>$$</p><p>则当n 趋近于无穷大时，加上或减去一个$x\land$应该会得到相同的结果：<br>$$<br>x\land x\land x\land …&#x3D;x\land(x\land x\land  …)&#x3D;x\land 2\Rightarrow x&#x3D;\sqrt{2}<br>$$</p><h2 id="一个钟表（按顺时针方向编号1-12）从墙上掉了下来，摔成三块。你会发现每一块上的数字之和是相等的。那么，每一块上的数字是多少呢？"><a href="#一个钟表（按顺时针方向编号1-12）从墙上掉了下来，摔成三块。你会发现每一块上的数字之和是相等的。那么，每一块上的数字是多少呢？" class="headerlink" title="一个钟表（按顺时针方向编号1-12）从墙上掉了下来，摔成三块。你会发现每一块上的数字之和是相等的。那么，每一块上的数字是多少呢？"></a>一个钟表（按顺时针方向编号1-12）从墙上掉了下来，摔成三块。你会发现每一块上的数字之和是相等的。那么，每一块上的数字是多少呢？</h2><p>使用求和方程，(1+12)*12&#x2F;2&#x3D;78，所以每一块的数字和必须是26，每一块上的数字必须是连续的，因为题目已经说明不允许有奇形怪状的碎块，我们很容易知道：5+6+7+8&#x3D;26，但是为什么再找不到更多的连续数字加起来是26呢？</p><p>这样的假设从12点到1点在钟表上就不正确了。一旦这个错误的假设被消除，那我们的思路就变得很明朗：12+1&#x3D;13，11+2&#x3D;13。因此第二个碎块应该是11，12，1，2。那最后一块自然而然就是3，4，9，10。</p><h2 id="假设有98个不同的整数从1到100。有什么好的方法找出两个缺失的整数在-1-100-内？"><a href="#假设有98个不同的整数从1到100。有什么好的方法找出两个缺失的整数在-1-100-内？" class="headerlink" title="假设有98个不同的整数从1到100。有什么好的方法找出两个缺失的整数在[1,100]内？"></a>假设有98个不同的整数从1到100。有什么好的方法找出两个缺失的整数在[1,100]内？</h2><p>将缺失的整数表示为$x$和$y$。现有的整数表示为$z_1$到$z_{98}$。应用求和方程：</p><p>$$<br>\sum_{n&#x3D;1}^{100} n&#x3D;x+y+\sum_{i&#x3D;1}^{98} z_i \Rightarrow x+y&#x3D;\frac{102\times 101}{2}-\sum_{i&#x3D;1}^{98}z_i<br>$$<br>$$<br>\sum_{n&#x3D;1}^{100}n^2&#x3D;x^2+y^2+\sum_{i&#x3D;1}^{98}z_i^2\Rightarrow x^2+y^2&#x3D;\frac{100\times 101 \times 201}{6}-\sum_{i&#x3D;1}^{98}z_i^2<br>$$<br>【$\sum^n_{i&#x3D;1}\limits i^2&#x3D;\frac{n(n+1)(2n+1)}{6}$】</p><p>通过上面两个方程可以解出x和y。</p><h2 id="BO3-tennis-game，bet-on-two-games-or-three-games"><a href="#BO3-tennis-game，bet-on-two-games-or-three-games" class="headerlink" title="BO3 tennis game，bet on two games or three games?"></a>BO3 tennis game，bet on two games or three games?</h2><p>设A、B赢的概率分别是p，q</p><p>两场结束的概率：$p^2+q^2$</p><p>三场结束的概率：$2pq$</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>随机过程</title>
    <link href="/2023/03/03/%E6%95%B0%E5%AD%A6/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/03/03/%E6%95%B0%E5%AD%A6/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="随机过程"><a href="#随机过程" class="headerlink" title="随机过程"></a>随机过程</h1><h2 id="鞅"><a href="#鞅" class="headerlink" title="鞅"></a>鞅</h2><h3 id="停时"><a href="#停时" class="headerlink" title="停时"></a>停时</h3><p>假如你在做地铁，但是你没有地铁路程图，如果别人和你说到什么站做什么事，然后你坐车到了那个站，你看见站牌名，就知道你可以开始行动了。这就是停时。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>岭回归和LASSO回归</title>
    <link href="/2023/03/03/%E6%95%B0%E5%AD%A6/%E5%B2%AD%E5%9B%9E%E5%BD%92%E5%92%8CLASSO%E5%9B%9E%E5%BD%92/"/>
    <url>/2023/03/03/%E6%95%B0%E5%AD%A6/%E5%B2%AD%E5%9B%9E%E5%BD%92%E5%92%8CLASSO%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="岭回归和LASSO回归"><a href="#岭回归和LASSO回归" class="headerlink" title="岭回归和LASSO回归"></a>岭回归和LASSO回归</h1><h2 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h2><p>和Beyesian回归比较</p><p>和PCA比较<br>$$<br>L(\beta)&#x3D;||Y-X\beta||^2+\lambda ||\beta||^2<br>$$</p><p>Ridge regression penalizes coefficients with L2 regularization. Ridge regression can decrease some coefficients, but can not select features. And it has closed form. Under the condition of many small&#x2F;medium sized effects, using ridge regression is better. </p><ul><li>有偏估计</li></ul><h4 id="岭回归模型"><a href="#岭回归模型" class="headerlink" title="岭回归模型"></a>岭回归模型</h4><p>$$<br>\begin{aligned}<br>\frac{\partial L}{\partial \beta}&amp;&#x3D;-2X^\top(Y-X\beta)+2\lambda \beta\<br>&amp;&#x3D;2(X^\top X+\lambda I_{pp})\beta-2X^\top Y\<br>&amp;&#x3D;0<br>\end{aligned}<br>$$<br>$$<br>\hat{\beta}<em>{ridge}&#x3D;(X^\top X+\lambda I</em>{pp})^{-1}X^\top Y<br>$$</p><h5 id="期望和方差"><a href="#期望和方差" class="headerlink" title="期望和方差"></a>期望和方差</h5><p>$$<br>\begin{aligned}<br>E[\hat{\beta}<em>{ridge}]&amp;&#x3D;E[(X^\top X+\lambda I</em>{pp})^{-1}X^\top Y]\<br>&amp;&#x3D;(X^\top X+\lambda I_{pp})^{-1}X^\top E[Y]\<br>&amp;&#x3D;(X^\top X+\lambda I_{pp})^{-1}X^\top X \beta\<br>&amp;\ne \beta<br>\end{aligned}<br>$$</p><p>Denote $\hat{\beta}$ as the estimate of ordinary linear regression, and $W_\lambda &#x3D; (X^\top X+\lambda I_{pp})^{-1}X^\top X$.<br>Then<br>$$<br>\begin{aligned}<br>W_\lambda \hat{\beta} &amp;&#x3D; (X^\top X+\lambda I_{pp})^{-1}X^\top X (X^\top X)^{-1}X^\top Y\<br>&amp;&#x3D;(X^\top X+\lambda I_{pp})^{-1}X^\top Y\<br>&amp;&#x3D;\hat{\beta}_{ridge}<br>\end{aligned}<br>$$<br>Since<br>$$<br>((X^\top X)^{-1})^\top&#x3D;((X^\top X)^{\top})^{-1}&#x3D;(X^\top X)^{-1}<br>$$<br>$$<br>Var(\hat{\beta})&#x3D;\sigma^2 (X^\top X)^{-1}<br>$$</p><p>then</p><p>$$<br>\begin{aligned}<br>Var(\hat{\beta}<em>{ridge})&amp;&#x3D;Var(W_\lambda \hat{\beta})\<br>&amp;&#x3D;E[(W_\lambda \hat{\beta}-W_\lambda \beta)(W_\lambda \hat{\beta}-W_\lambda \beta)^\top]\<br>&amp;&#x3D;W_\lambda E[ \hat{\beta}\hat{\beta}^\top] W_\lambda^\top-W_\lambda \beta \beta^\top W_\lambda^\top\<br>&amp;&#x3D;W_\lambda (\beta\beta^\top +\sigma^2(X^\top X)^{-1})W_\lambda^\top-W_\lambda \beta \beta^\top W_\lambda^\top\<br>&amp;&#x3D;\sigma^2 W_\lambda (X^\top X)^{-1} W_\lambda^\top\<br>&amp;&#x3D;\sigma^2 (X^\top X+\lambda I</em>{pp})^{-1}X^\top X [(X^\top X+\lambda I_{pp})^{-1}]^\top<br>\end{aligned}<br>$$</p><h3 id="岭回归vs线性回归"><a href="#岭回归vs线性回归" class="headerlink" title="岭回归vs线性回归"></a>岭回归vs线性回归</h3><h4 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h4><p>$$<br>\begin{aligned}<br>    Var(\hat{\beta})-Var(\hat{\beta}<em>{ridge})&amp;&#x3D;\sigma^2 (X^\top X)^{-1}-\sigma^2 (X^\top X+\lambda I</em>{pp})^{-1}X^\top X [(X^\top X+\lambda I_{pp})^{-1}]^\top\<br>    &amp;&#x3D;\sigma^2 W_\lambda[2\lambda(X^\top X)^{-2}+\lambda^2 (X^\top X)^{-3}]W_\lambda^\top\<br>    &amp;&#x3D;\sigma^2(X^\top X+\lambda I_{pp})^{-1}[2\lambda I_{pp}+\lambda^2(X^\top X)^{-1}][(X^\top X+\lambda I_{pp})^{-1}]^\top<br>\end{aligned}<br>$$<br>The difference is non-negative definite as each component in the matrix product is non-negative definite.<br>$$<br>Var(\hat{\beta})\succcurlyeq  Var(\hat{\beta}_{ridge})<br>$$<br>Hence, he variance of the ridge estimator is less than the variance of the maximum likelihood estimator for the ordinary regression model.</p><h4 id="MSE"><a href="#MSE" class="headerlink" title="MSE"></a>MSE</h4><p>$$<br>MSE[\hat{\beta}<em>{ridge}]&#x3D;Var(\hat{\beta}</em>{ridge})+Bias^2(\hat{\beta}_{ridge})<br>$$<br>$$<br>MSE[\hat{\beta}]&#x3D;Var(\hat{\beta})+Bias^2(\hat{\beta})&#x3D;Var(\hat{\beta})<br>$$</p><p>$$<br>\begin{aligned}<br>Bias^2(\hat{\beta}<em>{ridge})&amp;&#x3D;(E[\hat{\beta}</em>{ridge}-\beta])^2\<br>&amp;&#x3D;[(X^\top X+\lambda I_{pp})^{-1}X^\top X \beta-\beta]^2\<br>&amp;&#x3D;[(X^\top X+\lambda I_{pp})^{-1}(X^\top X+\lambda I_{pp}-\lambda I_{pp}) \beta-\beta]^2\<br>&amp;&#x3D;[-\lambda(X^\top X+\lambda I_{pp})^{-1} \beta]^2\<br>&amp;&#x3D;\lambda^2 (X^\top X+\lambda I_{pp})^{-1} \beta \beta^\top[(X^\top X+\lambda I_{pp})^{-1} ]^\top<br>\end{aligned}<br>$$<br>$$<br>\begin{aligned}<br>    MSE[\hat{\beta}]-MSE[\hat{\beta}<em>{ridge}]&amp;&#x3D;Var(\hat{\beta})-Var(\hat{\beta}</em>{ridge})-Bias^2(\hat{\beta}<em>{ridge})\<br>    &amp;&#x3D;\sigma^2(X^\top X+\lambda I</em>{pp})^{-1}[2\lambda I_{pp}+\lambda^2(X^\top X)^{-1}][(X^\top X+\lambda I_{pp})^{-1}]^\top\<br>    &amp;\quad -\lambda^2 (X^\top X+\lambda I_{pp})^{-1} \beta \beta^\top[(X^\top X+\lambda I_{pp})^{-1} ]^\top\<br>    &amp;&#x3D;\lambda(X^\top X+\lambda I_{pp})^{-1}[2\sigma^2I_{pp}+\lambda\sigma^2(X^\top X)^{-1}-\lambda \beta \beta^\top]\<br>    &amp;\quad [(X^\top X+\lambda I_{pp})^{-1}]^\top<br>\end{aligned}<br>$$<br>$MSE[\hat{\beta}]-MSE[\hat{\beta}<em>{ridge}]\succeq 0$ only when $2\sigma^2I</em>{pp}+\lambda\sigma^2(X^\top X)^{-1}-\lambda \beta \beta^\top\succeq 0$, that is $2\sigma^2I_{pp}-\lambda \beta \beta^\top\succeq 0$, $\lambda \leqslant 2\sigma^2(\beta^\top\beta)^{-1}$.</p><h4 id="优劣势"><a href="#优劣势" class="headerlink" title="优劣势"></a>优劣势</h4><p>线性回归和岭回归都是线性模型，用于拟合数据之间的线性关系。它们的主要区别在于模型复杂度的控制和正则化项的引入。</p><p>通常来说，当训练数据的特征数比样本数大很多，或者特征之间存在多重共线性（即某些特征之间存在较高的相关性），线性回归的表现会比较差，此时可以使用岭回归。</p><p>另外，在存在离群点（outlier）的情况下，线性回归的表现也可能较差，因为离群点会对模型产生较大的影响。此时，可以使用带有正则化项的岭回归来降低离群点的影响。</p><p>总之，当样本数比特征数多，且不存在多重共线性或离群点时，线性回归可能会是更好的选择；而当特征数比样本数大或存在多重共线性或离群点时，岭回归可能会表现更好。当然，最好的方法是尝试不同的模型并进行比较。</p><h2 id="LASSO回归"><a href="#LASSO回归" class="headerlink" title="LASSO回归"></a>LASSO回归</h2><p>$$<br>L(\beta)&#x3D;||Y-X\beta||^2+\lambda ||\beta||^1<br>$$</p><p>LASSO regression penalizes coefficients with L1 regularization. LASSO regression can make some coefficients exactly equal to 0, achieving feature selection. But it has no closed form. Under the condition of only a few variables with medium&#x2F;large effect, using LASSO regression is better</p><h2 id="岭回归-vs-LASSO回归"><a href="#岭回归-vs-LASSO回归" class="headerlink" title="岭回归 vs LASSO回归"></a>岭回归 vs LASSO回归</h2><p>岭回归和Lasso回归是两种经典的正则化线性回归算法，它们都是通过在代价函数中引入正则化项来控制模型复杂度，避免过拟合。两者的主要区别在于使用的正则化项不同，岭回归使用L2正则化，而Lasso回归使用L1正则化。这两种正则化方式对应的参数惩罚项分别是参数平方和和参数绝对值和。</p><p>Ridge regression penalizes coefficents with $L_2$ regularization.Ridge regression can decrease some coefficients, but can not select features. And it has closed form. Under the condition of many small&#x2F;medium sized effects, using ridge regression is better.</p><p>LASSO regression penalizes coefficents with $L_1$ regularization. LASSO regression can make some coefficients exactly equal to 0, achieving feature selection. But it has no closed form. Under the condition of only a few variables with medium&#x2F;large effect, using LASSO regression is better.</p><h3 id="岭回归的优势"><a href="#岭回归的优势" class="headerlink" title="岭回归的优势"></a>岭回归的优势</h3><ol><li>可以处理多重共线性：当数据中存在多个高度相关的自变量时，最小二乘回归会导致过拟合，而岭回归可以通过对参数进行平滑处理，减小多重共线性的影响，提高模型的鲁棒性。</li><li>对异常值不敏感：由于岭回归对参数进行了平滑处理，因此可以有效地降低异常值的影响，提高模型的稳定性。</li><li>可以得到更加稳定的结果：由于岭回归引入的L2正则化项能够控制模型的复杂度，因此可以有效地减小模型的方差，降低模型的波动性，从而得到更加稳定的结果。</li><li>有闭式解</li></ol><h3 id="Lasso回归的优势"><a href="#Lasso回归的优势" class="headerlink" title="Lasso回归的优势"></a>Lasso回归的优势</h3><ol><li>可以进行特征选择：由于L1正则化倾向于将一些参数压缩到0，因此可以用于特征选择，即通过Lasso回归来筛选出对目标变量有重要影响的特征，从而减小模型的复杂度。</li><li>可以用于稀疏数据集：在处理稀疏数据集时，Lasso回归通常比岭回归更为有效，因为L1正则化能够将某些系数压缩为0，从而能够更好地处理稀疏数据。</li></ol><p>LASSO回归无闭式解：L1正则化项对于参数的求导结果不是可解析的，因此无法直接求出最小化目标函数时的回归系数的闭式解。</p><p>为了解决LASSO回归无法直接求解的问题，通常采用迭代算法来逼近最小化目标函数时的回归系数。常用的算法有坐标下降（Coordinate Descent）算法、最小角回归（Least Angle Regression, LAR）算法、以及基于梯度下降（Gradient Descent）的算法等。这些算法都可以在一定程度上逼近最小化目标函数时的回归系数，但无法得到闭式解。</p><p>综上所述，岭回归和Lasso回归都是非常实用的线性回归算法，在不同的应用场景下具有不同的优势。如果数据集中存在多重共线性，或者需要得到更加稳定的结果，岭回归可能更加合适；而如果需要进行特征选择或者处理稀疏数据集，则Lasso回归可能更加适用。</p><h3 id="Ridge-vs-LASSO稀疏解"><a href="#Ridge-vs-LASSO稀疏解" class="headerlink" title="Ridge vs LASSO稀疏解"></a>Ridge vs LASSO稀疏解</h3><p>图中彩色线条即为目标函数的等高线，黑色线条即为约束条件。根据岭回归和LASSO回归的约束条件，分别得到下图两个图像。</p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20230131092039.png"></p><p>右图为LASSO回归图像，目标函数的等高线，大部分时候都会在角的地方相交。例如图中所示，横坐标 $\hat{\beta}_1$即为0，因此就产生了稀疏性【在高纬度情况下，同样道理】；而在岭回归的图像中，约束条件画出来是一个圆，所以相交的地方出现在具有稀疏性的位置的概率就变得非常小了。<strong>这就从直观上来解释了为什么LASSO回归能产生稀疏性，而岭回归不行的原因了。</strong></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>回归</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线性回归</title>
    <link href="/2023/03/03/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <url>/2023/03/03/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h2><ol><li><p>The Two Variables Should be in a <strong>Linear</strong> Relationship</p><ul><li>检验方法：散点图scatter plot</li><li>解决：According to the characteristics of the data, perform non-linear transformation on the independent&#x2F;dependent variables. For example, take square, cubic, logarithmic, etc</li></ul></li><li><p>residuals follow <strong>normal distribution</strong></p><ul><li>检验方法：QQ图（quantile of target distribution and sample distribution, if the data points are distributed near the straight line y&#x3D;x)或ks检验</li><li>影响：置信区间会变得很不稳定</li><li>解决：<ul><li>寻找遗漏的自变量</li><li>检验并剔除异常值</li><li>对自变量和&#x2F;或因变量进行非线性变换</li></ul></li></ul></li><li><p>There Should be No <strong>Multicollinearity</strong> in the Data多重共线性</p><ul><li>Independent variables shall be independent of each other</li><li>检验方法：<ul><li>VIF (variance inflation factor)(&lt;10 is ok), $VIF&#x3D;\frac{1}{1-R^2}$，$R^2$ is the multiple correlation coefficient of linear regression with this variable as the dependent variable and the other variables as the independent variables. 表示It represents the variance of the regression coefficient estimator over the variance when the independent variables without multicollinearity</li><li>correlation matrix (&gt;0.8)【VIF和corr有关，VIF &#x3D; 皮尔逊相关系数矩阵的余子式&#x2F;皮尔逊相关系数矩阵的行列式】</li></ul></li><li>影响：<ul><li>high correlated: variance of estimate be larger，矩阵$(X^TX)$几乎不可逆，$(X^TX)^{-1}$变得很大，使得方差$Var(\hat{\beta}|X)&#x3D;\sigma^2(X^TX)^{-1}$增大，系数估计不准确；X中元素轻微变化就会引起$(X^TX)^{-1}$很大变化，导致OLS估计值$\hat{\beta}$发生很大变化</li><li>strict correlated: The rank of the X will be smaller than the number of independent variables, making (XTX) irreversible, the estimate has no solution</li></ul></li><li>解决：<ul><li>For highly correlated independent variables, only reserve one of them</li><li>PCA</li><li>Ridge&#x2F;LASSO</li><li>如不关心具体的回归系数，只关心整个方程的预测能力，可不必理会多重共线性。多重共线性的主要后果是使得对单个变量的贡献估计不准，但所有变量的整体效应仍可较准确地估计</li><li>如关心具体的回归系数，但多重共线性并不影响所关心变量的显著性，也可不必理会。在方差膨胀的情况下，系数依然显著；如没有多重共线性，只会更显著</li><li>如多重共线性影响所关心变量的显著性，应设法进行处理。如增大样本容量，剔除导致严重共线性的变量，将变量标准化，或对模型设定进行修改</li></ul></li></ul></li><li><p>There Should be No <strong>Autocorrelation</strong> in the Data自相关性</p><ul><li><p>The residuals should be independent of each other.扰动项方差矩阵非主对角线（main diagonal）元素不为0</p></li><li><p>检验方法：DW Statistics</p><ul><li>BG检验：<ul><li>思路：扰动项存在阶自相关→p阶自回归方程系数不全为零→$\varepsilon_i$不可观测，用$e_i$替代进行辅助回归→因为残差是解释变量的函数，还需要在辅助回归中引入解释变量</li><li>原假设：$H_0:\gamma_1&#x3D;…&#x3D;\gamma_p&#x3D;0$</li><li>辅助回归：$e_t&#x3D;\gamma_1e_{t-1}+…+\gamma_pe_{t-p}+\delta_2x_{t2}+…+\delta_Kx_{tK}+v_t(t&#x3D;p+1,…,n)$</li><li>LM检验：$LM&#x3D;(n-p)R^2\xrightarrow{d}\mathcal{X}^2(p)$</li></ul></li></ul></li><li><p>影响：【自相关不影响无偏性、一致性、渐进正态】Reduce the accuracy of the model，普通标准误的t检验、F检验失效，不是BLUE</p></li><li><p>解决：</p><ul><li><p>GLS</p></li><li><p>ARIMA</p></li><li><p>CO估计法：</p><ol><li><p>假设扰动项$\varepsilon_t$存在自相关，为一阶自回归形式$\varepsilon_t&#x3D;\rho\varepsilon_{t-1}+u_t$，$u_t$为白噪声</p></li><li><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210623153310.png" style="zoom:50%;" /><p>新扰动项$(\varepsilon_t-\rho\varepsilon_{t-1})&#x3D;u_t$为白噪声</p></li><li><p>对方程（8.14）进行OLS估计，但损失一个样本容量，仍不是BLUE</p></li><li><p>补上一个方程</p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210623153537.png" style="zoom:50%;" /></li></ol></li></ul></li></ul></li><li><p>There Should be <strong>Homoscedasticity</strong> Among the Data同方差性</p><ul><li><p>The variance of the residuals should be constant，扰动项方差矩阵主对角线元素不相等</p></li><li><p>检验方法：White Test</p><ul><li>BP检验：<ul><li>思路：存在异方差→$\varepsilon_i$对$x_i$的回归系数不全为0→扰动项$\varepsilon_i^2$不可观测，用残差平方$e^2_i$代替进行辅助回归</li><li>原假设：$H_0:\delta_2&#x3D;…&#x3D;\delta_K&#x3D;0$</li><li>辅助回归：$e_i^2&#x3D;\delta_1+\delta_2x_{i2}+…+\delta_Kx_{iK}+error_i$</li><li>LM检验：$LM&#x3D;nR^2\xrightarrow{d}\mathcal{X}^2(K-1)$</li></ul></li><li>White检验：<ul><li>思路：BP检验假设条件方差函数为线性函数，可能忽略了高次项。在BP检验的辅助回归中加入所有二次项（平方项和交叉项）</li><li>辅助回归：$e_i^2&#x3D;\delta_1+\delta_2x_{i2}+\delta_3x_{i3}+\delta_4x_{i2}^2+\delta_5x_{i3}^2+\delta_6x_{i2}x_{i3}+error_i$</li><li>优点：可检验任何形式的异方差；因为根据泰勒展开式，二次函数可很好地逼近任何光滑函数</li><li>缺点：如果解释变量较多，则解释变量的二次项将更多，在辅助回归中将损失较多样本容量</li></ul></li></ul></li><li><p>影响：【异方差不影响无偏性、渐进正态】，估计不有效，误差较大，普通标准误的t检验、F检验失效，不是BLUE</p></li><li><p>解决：</p><ul><li><p>使用稳健回归。即，不实用最小二乘法的平方和形式的目标函数，从而降低了残差方差较大的数据点对参数估计的影响。</p></li><li><p>使用加权回归。即，根据每个数据点的拟合值的方差为每个数据点分配一个权重，给予较高方差的数据点较小的权重，从而缩小残差和</p></li><li><p>WLS：方差较小的观测值包含的信息量较大，给予方差较小的观测值较大的权重，然后进行加权最小二乘法估计。通过变量转换，使得变换后的模型满足球形扰动项的假定(变为同方差)，然后进行OLS 估计</p><p>步骤：</p><ol><li>假设异方差形式为$Var(\varepsilon_i|x_i)&#x3D;\sigma_i^2&#x3D;\sigma^2v_i$</li><li>回归模型两边同时乘权重$\frac{1}{\sqrt{v_i}}$，新扰动项$\frac{\varepsilon_i}{\sqrt{v_i}}$不再有异方差</li><li>对回归模型进行OLS回归，最小化加权残差平方和$min\sum^n_{i&#x3D;1}\limits(\frac{e_i}{\sqrt{v_i}})^2&#x3D;\sum^n_{i&#x3D;1}\limits\frac{e_i^2}{v_i}$，权重为方差的倒数$\frac{1}{v_i}$</li></ol></li><li><p>FWLS：</p><ul><li>why FWLS：使用WLS虽可得到BLUE估计，但须知道每位个体的方差，但${\sigma^2_i}^n_{i&#x3D;1}$在实践中通常不知</li><li>思路：先用样本数据估计${\sigma^2_i}^n_{i&#x3D;1}$，再使用WLS</li><li>步骤：<ol><li>BP检验时进行辅助回归$e_i^2&#x3D;\delta_1+\delta_2x_{i2}+…+\delta_Kx_{iK}+error_i$</li><li>得到$\sigma^2_i$的估计值$\hat{\sigma^2_i}&#x3D;\hat{\delta_1}+\hat{\delta_2}x_{i2}+…+\hat{\delta_K}x_{iK}$</li><li>为保证$\hat{\sigma^2_i}$始终为正，假设条件方差函数为对数形式：$ln(e_i^2)&#x3D;\delta_1+\delta_2x_{i2}+…+\delta_Kx_{iK}+error_i$，对此方程进行OLS回归，得到$lne^2_i$的预测值$ln(\hat{\sigma_i^2})$，则$\hat{\sigma_i^2}&#x3D;e^{ln\hat{\sigma^2_i}}$一定为正</li><li>以$\frac{1}{\hat{\sigma^2_i}}$为权重对原方程进行WLS估计</li></ol></li><li>优点：在大样本下比OLS更有效率</li><li>缺点：由于$\hat{\beta_{FWLS}}$是y的非线性函数，一般有偏，所以不是BLUE</li></ul></li></ul></li></ul></li><li><p>exogenous外生性</p><ul><li><p>The <strong>residuals</strong> should be independent to independent variables. 残差向量和每一个解释变量正交</p></li><li><p>$E(\varepsilon|X)&#x3D;0$, condition on X, the expectation of residual is 0.</p></li></ul></li></ol><h2 id="OLS优良性质"><a href="#OLS优良性质" class="headerlink" title="OLS优良性质"></a>OLS优良性质</h2><h3 id="BLUE"><a href="#BLUE" class="headerlink" title="BLUE"></a>BLUE</h3><p>在经典假设下，OLS估计量估计量具有，线性、无偏性和有效性三个优良性质，称为最佳线性无偏估计量（best linear unbiased estimator,BLUE）</p><p>球形扰动项下的估计量是最佳线性无偏估计量（BLUE），这个结论叫<strong>高斯马尔科夫定理</strong></p><h3 id="大样本"><a href="#大样本" class="headerlink" title="大样本"></a>大样本</h3><ul><li>一致：$\underset{n\rightarrow \infty}{plim}\hat{\beta_n}&#x3D;\beta$</li><li>渐进正态Asymptotic normal distribution：$\hat{\beta_n}\xrightarrow{d} N(\beta, \frac{\sigma^2}{n})$</li></ul><h2 id="线性回归模型"><a href="#线性回归模型" class="headerlink" title="线性回归模型"></a>线性回归模型</h2><p>$$<br>Y&#x3D;X\beta+\varepsilon<br>$$</p><p>$$<br>\begin{aligned}<br>L_\beta &amp;&#x3D;(Y-X\beta)^\top (Y-X\beta)\<br>&amp;&#x3D;Y^\top Y-Y^\top X\beta-\beta^\top X^\top Y+\beta^\top X^\top X\beta<br>\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}<br>\frac{\partial L_\beta}{\partial \beta}&amp;&#x3D;-X^\top Y-X^\top Y +X^\top X\beta+(\beta^\top X^\top X)^\top\<br>&amp;&#x3D;-2X^\top Y+2X^\top X\beta\<br>&amp;&#x3D;2X^\top (X\beta - Y)\<br>&amp;&#x3D;0<br>\end{aligned}<br>$$</p><p>$$<br>\hat{\beta}&#x3D;(X^\top X)^{-1}X^\top Y<br>$$</p><h3 id="梯度下降法求解-hat-beta"><a href="#梯度下降法求解-hat-beta" class="headerlink" title="梯度下降法求解$\hat{\beta}$"></a>梯度下降法求解$\hat{\beta}$</h3><p>梯度下降法损失函数用MSE：<br>$$<br>MSE(\beta)&#x3D;\frac{1}{n}(Y-X\beta)^\top (Y-X\beta)<br>$$</p><p>$$<br>\nabla MSE(\beta)&#x3D;\frac{2}{n}X^\top (X\beta - Y)<br>$$</p><p>梯度下降：<br>$$<br>\beta &#x3D; \beta-\alpha\nabla MSE(\beta)<br>$$<br>其中$\alpha$是学习率</p><h4 id="梯度下降法损失函数用MSE的原因"><a href="#梯度下降法损失函数用MSE的原因" class="headerlink" title="梯度下降法损失函数用MSE的原因"></a>梯度下降法损失函数用MSE的原因</h4><p>在使用梯度下降法求解线性回归时，常用的损失函数是均方误差（MSE）而不是误差平方和（SSE）。</p><p>误差平方和（SSE）是指所有样本点的预测值与真实值之差的平方和，而均方误差（MSE）是指所有样本点的预测值与真实值之差的平方和除以样本数量。这两个指标在一定程度上是相关的，但在优化过程中，使用MSE可以更好地优化模型。</p><ul><li>MSE可以缓解样本数量的影响。SSE随着样本数量的增加而增加，而MSE则不会随样本数量变化而变化，这使得使用MSE更具有泛化性能。因此，当使用梯度下降算法优化模型时，使用MSE可以更好地应对不同大小的数据集，而不需要调整超参数</li></ul><p>综上所述，使用MSE作为损失函数可以更好地应对不同大小的数据集，并且可以使梯度下降算法更加高效</p><h3 id="期望和方差"><a href="#期望和方差" class="headerlink" title="期望和方差"></a>期望和方差</h3><p>$$<br>\begin{aligned}<br>E[\hat{\beta}]&amp;&#x3D;E[(X^\top X)^{-1}X^\top (X\beta+\varepsilon)]\<br>&amp;&#x3D;(X^\top X)^{-1}X^\top X\beta + (X^\top X)^{-1}X^\top E[\varepsilon]\<br>&amp;&#x3D;\beta<br>\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}<br>Var(\hat{\beta})&amp;&#x3D;E[(\hat{\beta}-E[\hat{\beta}])(\hat{\beta}-E[\hat{\beta}])]\<br>&amp;&#x3D;E[(\hat{\beta} -\beta)(\hat{\beta}-\beta)^\top]\<br>                &amp;&#x3D;E[\hat{\beta}\hat{\beta}^\top-\hat{\beta} \beta^\top -\beta \hat{\beta}^\top +\beta \beta^\top]\<br>                &amp;&#x3D;E[\hat{\beta}\hat{\beta}^\top]-E[\hat{\beta}]\beta^\top-\beta E[\hat{\beta}^\top]+\beta \beta^\top\<br>                &amp;&#x3D;E[(X^\top X)^{-1}X^\top YY^\top X((X^\top X)^{-1})^\top]-\beta\beta^\top-\beta \beta^\top+\beta \beta^\top\<br>                &amp;&#x3D;(X^\top X)^{-1}X^\top E[YY^\top]X(X^\top X)^{-1}-\beta\beta^\top\<br>                &amp;&#x3D;(X^\top X)^{-1}X^\top E[(X\beta + \varepsilon)(X\beta + \varepsilon)^\top]X(X^\top X)^{-1}-\beta\beta^\top\<br>                &amp;&#x3D;(X^\top X)^{-1}X^\top E[(X\beta + \varepsilon)(\beta^\top X^\top + \varepsilon^\top)]X(X^\top X)^{-1}-\beta\beta^\top\<br>                &amp;&#x3D;(X^\top X)^{-1}X^\top E[X\beta \beta^\top X^\top + X\beta\varepsilon^\top+\varepsilon\beta^\top X^\top +\varepsilon \varepsilon^\top]X(X^\top X)^{-1}-\beta\beta^\top\<br>                &amp;&#x3D;(X^\top X)^{-1}X^\top (X\beta \beta^\top X^\top + \sigma^2 I_n )X(X^\top X)^{-1}-\beta\beta^\top\<br>                &amp;&#x3D;\beta\beta^\top +\sigma^2 (X^\top X)^{-1}-\beta\beta^\top\<br>                &amp;&#x3D;\sigma^2 (X^\top X)^{-1}<br>\end{aligned}<br>$$</p><h3 id="遗漏变量、冗余变量与扰动项"><a href="#遗漏变量、冗余变量与扰动项" class="headerlink" title="遗漏变量、冗余变量与扰动项"></a>遗漏变量、冗余变量与扰动项</h3><h4 id="遗漏变量"><a href="#遗漏变量" class="headerlink" title="遗漏变量"></a>遗漏变量</h4><p>$$<br>\beta&#x3D;<br>\left( \begin{array}{c}<br>    \beta_0\<br>    \beta_1\<br>    \beta_2\<br>\end{array} \right)\<br>X&#x3D;(1,x_{1t},x_{2t})\<br>r&#x3D;X\beta+\varepsilon\<br>\beta&#x3D;(X^\top X)^{-1}X^\top r\<br>$$</p><p>Denote<br>$$<br>X’&#x3D;(1,x_{1t})\<br>\begin{aligned}<br>\beta’&#x3D;\left( \begin{array}{c}<br>    \hat{\alpha}\<br>    \hat{\beta}\<br>\end{array} \right)&amp;&#x3D;(X’^\top X’)^{-1}X’^\top r\<br>&amp;&#x3D;(X’^\top X’)^{-1}X’^\top (X\beta+\varepsilon)\<br>&amp;&#x3D;(X’^\top X’)^{-1}X’^\top X\beta+(X’^\top X’)^{-1}X’^\top \varepsilon\<br>\end{aligned}<br>$$<br>Then<br>$$<br>E[\beta’]&#x3D;(X’^\top X’)^{-1}X’^\top X\beta\<br>\begin{aligned}<br>\left( \begin{array}{c}<br>    \hat{\alpha}\<br>    E[\hat{\beta}]\<br>\end{array} \right)&amp;&#x3D;\left( \begin{array}{c}<br>    1&amp;x_{1t}\<br>    x_{1t}&amp; x_{1t}x_{1t}^\top\<br>\end{array} \right)^{-1}\left( \begin{array}{c}<br>    1&amp;x_{1t}&amp;x_{2t}\<br>    x_{1t}&amp;x_{1t}x_{1t}^\top &amp;x_{1t}x_{2t}^\top<br>\end{array} \right)\left( \begin{array}{c}<br>    \beta_0\<br>    \beta_1\<br>    \beta_2\<br>\end{array} \right)\<br>&amp;&#x3D;\left( \begin{array}{c}<br>    1&amp;0&amp;k_1\<br>    0&amp;1&amp;k_2\<br>\end{array} \right)\left( \begin{array}{c}<br>    \beta_0\<br>    \beta_1\<br>    \beta_2\<br>\end{array} \right)<br>\end{aligned}<br>$$<br>$$<br>E[\hat{\beta}]&#x3D;\beta_1+\frac{Cov(x_1, x_2)}{Var(x_1)}\beta_2<br>$$<br>If $k_2\ne0$, $\hat{\beta}$ is not an unbiased estimator of $\beta_1$ in (1), and it’s not consistent. The bias direction is based on $k_2\propto Cov(x_{1t},x_{2t})$.</p><p>由于遗漏变量$x_2$被归入扰动项中，可能增大扰动项的方差，影响OLS估计的精确度</p><h4 id="冗余变量"><a href="#冗余变量" class="headerlink" title="冗余变量"></a>冗余变量</h4><p>Denote<br>$$<br>\begin{aligned}<br>X’&amp;&#x3D;(1,x_{1t},x_{2t},x_{3t})\<br>&amp;&#x3D;\left( \begin{matrix}<br>    1&amp;x_{11}&amp;x_{21}&amp;x_{31}\<br>    1&amp;x_{12}&amp;x_{22}&amp;x_{32}\<br>    …&amp;…&amp;…&amp;…\<br>    1&amp;x_{1T}&amp;x_{2T}&amp;x_{3T}\<br>\end{matrix} \right)<br>\end{aligned}<br>$$</p><p>$$<br>A&#x3D;\left( \begin{matrix}<br>    1&amp;0&amp;0\<br>    0&amp;1&amp;0\<br>    0&amp;0&amp;1\<br>    0&amp;0&amp;0\<br>\end{matrix} \right)<br>$$</p><p>Then<br>$$<br>X&#x3D;X’A\<br>\beta’&#x3D;\left( \begin{array}{c}<br>    \hat{\gamma}_0\<br>    \hat{\gamma}_1\<br>    \hat{\gamma}_2\<br>    \hat{\gamma}_3<br>\end{array} \right)&#x3D;(X’^\top X’)^{-1}X’^\top X’A\beta+(X’^\top X’)^{-1}X’^\top \varepsilon\<br>E[\beta’]&#x3D;(X’^\top X’)^{-1}X’^\top X’A\beta&#x3D;A\beta\<br>\left( \begin{array}{c}<br>    E[\hat{\gamma}_0]\<br>    E[\hat{\gamma}_1]\<br>    E[\hat{\gamma}_2]\<br>    E[\hat{\gamma}_3]<br>\end{array} \right)&#x3D;\left( \begin{matrix}<br>    1&amp;0&amp;0\<br>    0&amp;1&amp;0\<br>    0&amp;0&amp;1\<br>    0&amp;0&amp;0\<br>\end{matrix} \right)\left( \begin{array}{c}<br>    \beta_0\<br>    \beta_1\<br>    \beta_2\<br>\end{array} \right)&#x3D;\left( \begin{array}{c}<br>    \beta_0\<br>    \beta_1\<br>    \beta_2\<br>    0<br>\end{array} \right)<br>$$<br>That is<br>$$<br>E[\hat{\gamma}_1]&#x3D;\beta_1\<br>E[\hat{\gamma}_2]&#x3D;\beta_2<br>$$<br>$\hat{\gamma}_1$ and $\hat{\gamma}_2$ are unbiased estimators of $\beta_1$ and $\beta_2$ in (1). So they are consistent.</p><p>影响：引入无关变量后，受到无关变量的干扰，估计量$\hat{\beta}$的方差一般会增大</p><h4 id="X有扰动项"><a href="#X有扰动项" class="headerlink" title="X有扰动项"></a>X有扰动项</h4><p>Denote<br>$$<br>\varDelta&#x3D;\left( \begin{matrix}<br>    0&amp;\delta_{11}&amp;\delta_{21}\<br>    0&amp;\delta_{12}&amp;\delta_{22}\<br>    …&amp;…&amp;…\<br>    0&amp;\delta_{1T}&amp;\delta_{2T}\<br>\end{matrix} \right)\<br>E[\varDelta]&#x3D;0\<br>X’&#x3D;X+\varDelta\<br>\begin{aligned}<br>\beta’&#x3D;\left( \begin{array}{c}<br>    \hat{\beta}_0\<br>    \hat{\beta}_1\<br>    \hat{\beta}_2\<br>\end{array} \right)&amp;&#x3D;(X’^\top X’)^{-1}X’^\top (X’-\varDelta)\beta+(X’^\top X’)^{-1}X’^\top \varepsilon\<br>&amp;&#x3D;(I-(X’^\top X’)^{-1}X’^\top\varDelta)\beta+(X’^\top X’)^{-1}X’^\top \varepsilon\<br>&amp;&#x3D;(I-([(X+\varDelta)^\top (X+\varDelta)]^{-1}(X+\varDelta)^\top\varDelta)\beta\<br>&amp;\quad+(X’^\top X’)^{-1}X’^\top \varepsilon\</p><p>\end{aligned}\<br>$$<br>Then<br>$$<br>\begin{aligned}<br>E[\beta’]&amp;&#x3D;[I-E[X^\top X+X^\top\varDelta+\varDelta^\top X+\varDelta^\top \varDelta)^{-1}(X^\top \varDelta+\varDelta^\top \varDelta)]]\beta\<br>&amp;\ne\beta<br>\end{aligned}<br>$$<br>Ms. Noisy cannot get unbiased estimators of $\beta_1$ and $\beta_2$ in (1). Since<br>$$<br>\underset{T\rightarrow \infty}{\lim}E[X^\top X+X^\top\varDelta+\varDelta^\top X+\varDelta^\top \varDelta)^{-1}(X^\top \varDelta+\varDelta^\top \varDelta)]\ne0<br>$$<br>She cannot get consistent estimators.</p><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><h3 id="R-2"><a href="#R-2" class="headerlink" title="$R^2$"></a>$R^2$</h3><h4 id="平方和分解公式-Sum-of-squares-decomposition"><a href="#平方和分解公式-Sum-of-squares-decomposition" class="headerlink" title="平方和分解公式 Sum of squares decomposition"></a>平方和分解公式 Sum of squares decomposition</h4><p>成立条件：</p><p>$\hat{y}$和$e$正交<br>$$<br>\hat{y}^\top e&#x3D;(X\hat{\beta})^\top e&#x3D;\hat{\beta}^\top X^\top e&#x3D;0<br>$$</p><p>$$<br>y&#x3D;\hat{y}+e<br>$$</p><p>回归平方和：ESS (explained sum of squares)</p><p>残差平方和：RSS(residual sum of squares)</p><p>总离差平方和：TSS(total sum of squares)</p><p>RSS+ESS&#x3D;TSS</p><p>$$<br>ESS&#x3D;\sum^n_{i&#x3D;1}(\hat{y_i}-\bar{y})^2<br>$$<br>$$<br>RSS&#x3D;\sum^n_{i&#x3D;1}(\hat{y_i}-y_i)^2<br>$$<br>$$<br>TSS&#x3D;\sum^n_{i&#x3D;1}(y_i-\bar{y})^2<br>$$</p><p>$$<br>R^2&#x3D;\frac{ESS}{TSS}&#x3D;1-\frac{RSS}{TSS}&#x3D;\frac{Var(\hat{y})}{Var(y)}&#x3D;1-\frac{MSE}{Var(y)}<br>$$</p><p>$$<br>TSS&#x3D;ESS+RSS\<br>\sum(y_i-\bar{y})^2&#x3D;\sum (\hat{y}_i-\bar{y})^2+\sum e_i^2<br>$$</p><h4 id="R-2-1"><a href="#R-2-1" class="headerlink" title="$R^2$"></a>$R^2$</h4><p>R²是指拟合优度，是回归直线对观测值的拟合程度。</p><p>R-square is used to evaluate the goodness of fit of a linear regression model. It is a value between 0 and 1 and itrepresents the proportion of the variation in the dependent variable that is explained by the independent variables in the model.</p><p>因变量的变化有多少比例可以由自变量解释</p><h4 id="R-2-的缺陷"><a href="#R-2-的缺陷" class="headerlink" title="$R^2$的缺陷"></a>$R^2$的缺陷</h4><ul><li>对异常值敏感（平方项）</li><li>对自变量个数敏感（增加个数会增大$R^2$）</li><li>无法区分线性与非线性关系</li><li>无常数项时不用R²度量拟合优度（平方和分解公式不成立）</li></ul><h4 id="样本外-R-2-为负数"><a href="#样本外-R-2-为负数" class="headerlink" title="样本外$R^2$为负数"></a>样本外$R^2$为负数</h4><p>RSS&gt;TSS</p><h4 id="调整-R-2-（很多变量）"><a href="#调整-R-2-（很多变量）" class="headerlink" title="调整$R^2$（很多变量）"></a>调整$R^2$（很多变量）</h4><p>The adjusted R square takes into account the influence of sample size and the number of independent variables in the regression.</p><p>$R^2$问题：增加自变量的个数会使$R^2$增大</p><p>解决方法：调整$R^2$<br>$$<br>R_{adj}&#x3D;1-\frac{\frac{RSS}{n-p-1}}{\frac{TSS}{n-1}}<br>$$<br>$p$是自变量个数，$n$是样本数量</p><p>问题：可能为负</p><h4 id="uncentered-R-2"><a href="#uncentered-R-2" class="headerlink" title="uncentered $R^2$"></a>uncentered $R^2$</h4><p>$$<br>R^2_{uc}&#x3D;\frac{\sum \hat{y_i}^2}{\sum y_i^2}<br>$$</p><p>来使$R^2$在0到1之间</p><h3 id="t检验和F检验"><a href="#t检验和F检验" class="headerlink" title="t检验和F检验"></a>t检验和F检验</h3><p>t检验和F检验的关系：单个变量的t检验平方就是自由度为1的F检验（第一自由度为1，第二自由度为样本量）</p><p>F检验和R²的关系：R²是去掉所有解释变量，只保留常数项的F检验</p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210622231304.png" style="zoom:50%;" /><ul><li>R²并非决定F统计量的唯一因素，还取决于样本容量n与解释变量个数K</li></ul><h2 id="X、Y数量变化的影响"><a href="#X、Y数量变化的影响" class="headerlink" title="X、Y数量变化的影响"></a>X、Y数量变化的影响</h2><h3 id="hat-beta"><a href="#hat-beta" class="headerlink" title="$\hat{\beta}$"></a>$\hat{\beta}$</h3><p>$$<br>\hat{\beta}&#x3D;(X^\top X)^{-1}X^\top Y<br>$$</p><p>Y→a倍：$\hat{\beta}$→a倍</p><p>X→a倍：$\hat{\beta}$→1&#x2F;a倍</p><p>样本复制一倍：</p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20230330111003.png" style="zoom:50%;" /><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20230330111522.png" style="zoom:50%;" /><h3 id="t检验值"><a href="#t检验值" class="headerlink" title="t检验值"></a>t检验值</h3><p>$$<br>t&#x3D;\frac{\hat{\beta}-\beta}{SE(\hat{\beta})}<br>$$</p><p>Y→a倍：t→不变</p><p>X→a倍：t→不变</p><p>样本复制一倍：t→$\sqrt{2}$t</p><h3 id="R-2-2"><a href="#R-2-2" class="headerlink" title="$R^2$"></a>$R^2$</h3><p>Y→a倍：$R^2$→不变</p><p>X→a倍：$R^2$→不变</p><p>样本复制一倍：$R^2$→不变【$\hat{\beta}$不变，预测值不变】</p><h2 id="线性回归准备"><a href="#线性回归准备" class="headerlink" title="线性回归准备"></a>线性回归准备</h2><ol><li><p>数据清洗和预处理：这涉及将数据从原始数据中提取出来，检查和处理数据中的缺失值、异常值和重复值。确保数据符合线性回归的前提假设。</p></li><li><p>可视化和描述性统计分析：通过图表和统计指标来理解数据的分布情况、变量之间的关系和异常值的存在。这些信息可以帮助确定应该使用哪种线性回归模型，以及哪些变量需要包含在模型中。</p></li><li><p>数据划分：将数据集划分为训练集和测试集，以便评估模型的性能并防止过度拟合。</p></li><li><p>特征工程：根据问题的要求，对数据进行特征工程，例如特征选择、特征变换和特征提取等，以便更好地表示数据和提高模型的性能。相关性分析</p></li><li><p>模型选择和训练：选择合适的线性回归模型，并对模型进行训练和调整参数，以便使模型在训练集上的性能最优。</p></li><li><p>Data cleaning and preprocessing: This involves extracting data from raw data, checking and handling missing values, outliers, and duplicates in the data. Ensure that the data meets the assumptions of linear regression.</p></li><li><p>Visualization and descriptive statistical analysis: Understand the distribution of data, the relationship between variables, and the presence of outliers through charts and statistical indicators. This information can help determine which linear regression model to use and which variables to include in the model.</p></li><li><p>Data partitioning: Divide the data set into training and test sets to evaluate model performance and prevent overfitting.</p></li><li><p>Feature engineering: Perform feature engineering on the data according to the requirements of the problem, such as feature selection, feature transformation, and feature extraction, to better represent the data and improve the performance of the model. Analyze correlation.</p></li><li><p>Model selection and training: Choose the appropriate linear regression model and train and adjust the parameters of the model to achieve optimal performance on the training set.</p></li></ol><p>数据分布对线性回归模型的影响主要表现在以下两个方面：</p><h2 id="线性回归数据分布的影响"><a href="#线性回归数据分布的影响" class="headerlink" title="线性回归数据分布的影响"></a>线性回归数据分布的影响</h2><ol><li><p>数据分布是否符合线性回归的基本假设</p><p> 线性回归模型的基本假设是，自变量与因变量之间存在线性关系，且残差（实际值与预测值之间的差异）是独立同分布且服从正态分布的。如果数据分布不符合这些假设，那么线性回归模型的预测结果可能会受到影响。</p><p> 例如，如果因变量的分布是偏态分布，那么线性回归模型可能会出现预测偏差，因为线性回归模型假设残差服从正态分布，而偏态分布的数据可能导致残差的非正态分布。同样，如果因变量与自变量之间的关系是非线性的，那么线性回归模型可能无法捕捉到这种关系，导致预测结果不准确。</p></li><li><p>数据分布的离群值和异常值</p><p> 离群值和异常值可以对线性回归模型的预测结果产生很大的影响。因为线性回归模型是基于最小二乘法来求解的，它对离群值非常敏感，如果数据集中存在离群值，那么它们可能会对模型的系数估计和预测结果产生很大的影响。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>回归</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>统计</title>
    <link href="/2023/03/03/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1/"/>
    <url>/2023/03/03/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h1><h2 id="好的estimator"><a href="#好的estimator" class="headerlink" title="好的estimator"></a>好的estimator</h2><ol><li>unbiased: on average they yield an estimate that equals the real parameter</li></ol><p>$$<br>E[\mu]&#x3D;\hat{\mu}\<br>E[\sigma^2]&#x3D;\hat{\sigma}^2<br>$$</p><ol start="2"><li>low variance: variance that is lower than any other possible estimator</li></ol><p>$$<br>   Var(\mu)&#x3D;E[(\hat{\mu}-\mu)^2]\<br>   Var(\sigma^2)&#x3D;E[(\hat{\sigma}^2-\sigma^2)^2]\<br>$$</p><h2 id="样本方差的分母为什么是n-1，而不是n？"><a href="#样本方差的分母为什么是n-1，而不是n？" class="headerlink" title="样本方差的分母为什么是n-1，而不是n？"></a>样本方差的分母为什么是n-1，而不是n？</h2><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912113632.png"></p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912113646.png"></p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912113657.png"></p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20220912113712.png"></p><h2 id="数据有偏差时相关统计量如何改变"><a href="#数据有偏差时相关统计量如何改变" class="headerlink" title="数据有偏差时相关统计量如何改变"></a>数据有偏差时相关统计量如何改变</h2><p>[对一些非常经典的模型做出一定调整]</p><h2 id="P值"><a href="#P值" class="headerlink" title="P值"></a>P值</h2><p>p值是在假定原假设为真时，得到与样本相同或者更极端的结果的概率。</p><p>P值很小则拒绝原假设</p><h2 id="第一类错误，第二类错误"><a href="#第一类错误，第二类错误" class="headerlink" title="第一类错误，第二类错误"></a>第一类错误，第二类错误</h2><ul><li>I：$P(拒绝H_0|H_0)$，弃真，原假设为真但拒绝原假设</li><li>II：$P(接受H_0|H_1)$，存伪，原假设伪假但接受原假设</li></ul><p>功效&#x3D;1-第二类错误概率<br>$$<br>功效&#x3D;1-P(接受H_0|H_1)&#x3D;P(拒绝H_0|H_1)<br>$$<br>知道第一类错误发生概率，不知道第二类错误发生概率，所以拒绝原假设比较理直气壮，接受原假设没有把握</p><ul><li>一、二类错误此消彼长，要都减少只能<strong>增加样本容量</strong></li><li>假设检验时一般指定可接受<strong>一类错误</strong>的最大概率（<strong>显著性水平</strong>）</li></ul><h2 id="MLE"><a href="#MLE" class="headerlink" title="MLE"></a>MLE</h2><p>缺点：</p><ul><li>数据量小性能差</li><li>$\theta$是个唯一值，没有别的参数可用，如果他错了那整个模型就错了</li></ul>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线代</title>
    <link href="/2023/03/03/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E4%BB%A3/"/>
    <url>/2023/03/03/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="线代"><a href="#线代" class="headerlink" title="线代"></a>线代</h1><h2 id="特征向量和特征值"><a href="#特征向量和特征值" class="headerlink" title="特征向量和特征值"></a>特征向量和特征值</h2><p>矩阵$A$，向量$v$，常量$\lambda$<br>$$<br>Av&#x3D;\lambda v<br>$$<br>矩阵乘向量：把向量transform，改变向量的大小和方向</p><ul><li><p>特征向量：所有transform以后不改变方向，只改变大小的向量的集合</p></li><li><p>特征值：向量改变大小的程度$\lambda$</p></li></ul><h3 id="求特征值"><a href="#求特征值" class="headerlink" title="求特征值"></a>求特征值</h3><p>$$<br>Av&#x3D;\lambda v\<br>$$<br>$$<br>Av&#x3D;\lambda I v\<br>$$<br>$$<br>(A-\lambda I)v&#x3D;0→两个矩阵都非满秩\<br>$$<br>$$<br>|A-\lambda I|&#x3D;0<br>$$</p><h2 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h2><p>可以将高维度数据转换为低维度的数据，同时尽可能地保留数据中的信息。</p><p>PCA的基本思想是，将原始数据映射到一个新的坐标系(Coordinate system)下，使得新坐标系的第一维度上数据的方差最大，第二维度上数据的方差次大，以此类推</p><p>特征向量给了我们它被拉伸或转化的方向，而特征值是它被拉伸的数值</p><p>协方差矩阵：有助于比较一只股票从其平均值的变动是如何依赖于另一只股票从其平均值的变动</p><p>协方差矩阵的特征值之和大约等于我们原始矩阵的总方差之和</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>标准化</li><li>计算协方差矩阵的特征值特征向量</li><li>对原来的矩阵乘特征向量矩阵</li></ol><p>假设我们有一个n个样本、m个特征的数据矩阵$X \in \mathbb{R}^{n \times m}$，其中每行表示一个样本，每列表示一个特征。PCA的目标是找到一个由k个基向量构成的新坐标系，使得在这个新坐标系下，数据的方差最大化，即找到一个线性变换$W \in \mathbb{R}^{m \times k}$，使得映射后的数据矩阵$Z \in \mathbb{R}^{n \times k}$的方差最大化。具体地，我们可以按照以下步骤进行计算：</p><ol><li><p>数据预处理：对原始数据进行标准化处理，使得各个特征的均值为0，方差为1。标准化后的数据矩阵为：</p><p> $$<br> \tilde{X}&#x3D;\frac{X-\mu}{\sigma}<br> $$</p><p> 其中$\mu$是每个特征的均值向量，$\sigma$是每个特征的标准差向量。</p></li><li><p>计算协方差矩阵：将标准化后的数据按列组成一个矩阵，计算其协方差矩阵。</p><p> 协方差矩阵为：<br> $$<br> \varSigma&#x3D;\frac{1}{n}\tilde{X}^\top \tilde{X}<br> $$</p></li><li><p>计算特征值和特征向量：对协方差矩阵进行特征值分解，得到特征值和对应的特征向量。</p><p> 协方差矩阵的特征值和特征向量为：<br> $$<br> \varSigma \mathbf{v_i}&#x3D;\lambda_i\mathbf{v_i}<br> $$<br> 其中$\lambda_i$表示第i个特征向量对应的特征值，$\mathbf{v}_i$表示第i个特征向量。</p></li><li><p>选取主成分：将特征值按大小排序，选取前k个特征值对应的特征向量作为新坐标系的基向量，这k个特征向量就是数据的主成分。</p><p> 我们将前k个特征向量按列组成一个矩阵$W_k \in \mathbb{R}^{m \times k}$，则映射后的数据矩阵为：<br> $$<br> Z&#x3D;\tilde{X}W_k<br> $$</p></li><li><p>转换数据：将原始数据映射到新坐标系下，得到降维后的数据。具体地，将每个样本点投影到新坐标系上，得到它在新坐标系下的坐标。映射后的数据矩阵$Z$的第i行表示原始数据矩阵$X$</p></li></ol><h3 id="PCA的缺点和解决方法"><a href="#PCA的缺点和解决方法" class="headerlink" title="PCA的缺点和解决方法"></a>PCA的缺点和解决方法</h3><ol><li>可能会导致信息损失，尤其是在保留的主成分数量较少的情况下，会丢失数据的一些细节信息。 解决方法：可以通过增加主成分的数量来降低信息损失，但需要考虑到维数灾难和计算复杂度的问题。同时，可以采用其他降维算法，如t-SNE等，来综合考虑数据的全局信息和局部结构。</li><li>对于非线性数据，PCA的效果可能不好。 解决方法：可以采用核PCA（Kernel PCA）来处理非线性数据，该方法通过使用核函数将数据映射到高维空间，然后再进行PCA降维。【在将数据映射到高维空间后，再使用PCA来降维，从而提取数据的主要特征。在核PCA中，使用核函数（如多项式核函数、高斯核函数等）将原始数据映射到高维空间，然后在高维空间中计算数据的协方差矩阵，最后通过对协方差矩阵进行特征值分解，得到主成分。与传统PCA相比，核PCA的主成分是在高维空间中计算得到的，可以更好地捕捉数据的非线性结构。同时，核PCA的计算复杂度较高，但可以通过使用矩阵的特殊性质和随机采样等方法来加速计算。核PCA可以应用于各种数据降维和特征提取的任务中，如图像处理、模式识别、信号处理等。】</li><li>对于非高斯分布的数据，PCA的效果也可能不佳。 解决方法：可以采用基于独立成分分析（Independent Component Analysis, ICA）的降维方法，该方法能够处理非高斯分布的数据，并将数据分解为独立的成分。</li><li>需要对数据进行标准化处理，否则会出现主成分不一致的问题。 解决方法：可以通过对数据进行标准化处理，使得每个特征的均值为0，方差为1，从而消除主成分不一致的问题。同时，可以采用其他方法来处理非标准化数据，如SVD等。</li><li>主成分各个特征维度的含义具有一定的模糊性，不如原始样本特征的解释性强</li></ol><h2 id="方差、协方差矩阵"><a href="#方差、协方差矩阵" class="headerlink" title="方差、协方差矩阵"></a>方差、协方差矩阵</h2><p>1列为1个变量，1行为1个样本：（m行n列）<br>$$<br>Cov(X)&#x3D;E[(X-E(X))^\top (X-E(X))]\<br>$$<br>$$<br>或Cov(X)&#x3D;\frac{1}{m}(X-E(X))^\top (X-E(X))\<br>$$<br>$$<br>Var(X)&#x3D;(X-E(X))^\top (X-E(X))<br>$$<br>E(X)&#x3D;0时：<br>$$<br>Cov(X)&#x3D;E[X^\top X]\<br>$$<br>$$<br>Var(X)&#x3D;X^\top X<br>$$<br>协方差矩阵是<strong>半正定</strong>矩阵：</p><ul><li>任意非零向量$x$，有$x^\top \Sigma x\geqslant 0$</li></ul><h2 id="cholesky分解"><a href="#cholesky分解" class="headerlink" title="cholesky分解"></a>cholesky分解</h2><p>正定矩阵<br>$$<br>A&#x3D;LL^\top，L是下三角矩阵<br>$$</p><h3 id="蒙特卡洛模拟whitening（cholesky分解）"><a href="#蒙特卡洛模拟whitening（cholesky分解）" class="headerlink" title="蒙特卡洛模拟whitening（cholesky分解）"></a>蒙特卡洛模拟whitening（cholesky分解）</h3><p>行：</p><p>$X$是每一行为一个随机变量的矩阵，协方差矩阵为$M$，均值为0，则<br>$$<br>M&#x3D;E[XX^\top]<br>$$<br>因为$M$是对称的半正定矩阵，有平方根$M^\frac{1}{2}$（不一定要对称），满足$M^\frac{1}{2}(M^\frac{1}{2})^\top&#x3D;M$。如果$M$是正定的，$M^\frac{1}{2}$可逆。矩阵$Y&#x3D;M^{-\frac{1}{2}}X$有协方差矩阵：</p><p>$$<br>Cov(Y)&#x3D;E[YY^\top]&#x3D;M^{-\frac{1}{2}}E[XX^\top] (M^{-\frac{1}{2}})^\top&#x3D;M^{-\frac{1}{2}}M(M^{-\frac{1}{2}})^\top\<br>$$<br>$$<br>&#x3D;M^{-\frac{1}{2}}(M^{\frac{1}{2}}(M^{\frac{1}{2}})^\top)(M^{-\frac{1}{2}})^\top&#x3D;(M^{-\frac{1}{2}}M^{\frac{1}{2}})(M^{-\frac{1}{2}}M^{\frac{1}{2}})^\top&#x3D;I<br>$$</p><p>其中$M^\frac{1}{2}$可以通过cholesky分解得到$L$，$M&#x3D;LL^\top$。如果$M$是正定的，$L$可逆。矩阵$Y&#x3D;L^{-1}X$有协方差矩阵：<br>$$<br>Cov(Y)&#x3D;E[YY^\top]&#x3D;L^{-1}E[XX^\top] (L^{-1})^\top&#x3D;L^{-1}M(L^{-1})^\top\<br>$$<br>$$<br>&#x3D;L^{-1}(LL^\top)(L^{-1})^\top&#x3D;(L^{-1}L)(L^{-1}L)^\top&#x3D;I<br>$$</p><p>列：</p><p>$X$是每一列为一个随机变量的矩阵，协方差矩阵为$M$，均值为0，则<br>$$<br>M&#x3D;E[X^\top X]<br>$$<br>因为$M$是对称的半正定矩阵，有平方根$M^\frac{1}{2}$（不一定要对称），满足$M^\frac{1}{2}(M^\frac{1}{2})^\top&#x3D;M$。如果$M$是正定的，$M^\frac{1}{2}$可逆。矩阵$Y&#x3D;X(M^{-\frac{1}{2}})^\top$有协方差矩阵：<br>$$<br>Cov(Y)&#x3D;E[Y^\top Y]&#x3D;M^{-\frac{1}{2}} E[X^\top X] (M^{-\frac{1}{2}})^\top&#x3D;M^{-\frac{1}{2}} M(M^{-\frac{1}{2}})^\top\<br>$$<br>$$<br>&#x3D;M^{-\frac{1}{2}}(M^{\frac{1}{2}}(M^{\frac{1}{2}})^\top)(M^{-\frac{1}{2}})^\top&#x3D;(M^{-\frac{1}{2}}M^{\frac{1}{2}})(M^{-\frac{1}{2}}M^{\frac{1}{2}})^\top&#x3D;I<br>$$</p><p>其中$M^\frac{1}{2}$可以通过cholesky分解得到$L$，$M&#x3D;LL^\top$。如果$M$是正定的，$L$可逆。矩阵$Y&#x3D;X(L^{-1})^\top$有协方差矩阵：</p><p>$$<br>Cov(Y)&#x3D;E[Y^\top Y]&#x3D;L^{-1}E[X^\top X] (L^{-1})^\top&#x3D;L^{-1}M(L^{-1})^\top\<br>$$<br>$$<br>&#x3D;L^{-1}(LL^{\top})(L^{-1})^{\top}&#x3D;(L^{-1} L)(L^{-1} L)^{\top}&#x3D;I<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基础知识</title>
    <link href="/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="bit-amp-byte"><a href="#bit-amp-byte" class="headerlink" title="bit &amp; byte"></a>bit &amp; byte</h2><ul><li>bit：表示信息的最小单位</li><li>byte：8 bit，表示256个数字。1个byte表示一个数据&#x2F;字母，2个byte表示一个汉字</li></ul><p>数据存储是以Byte为单位，数据传输大多是以bit为单位</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python</title>
    <link href="/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA/Python/"/>
    <url>/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA/Python/</url>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>Python的垃圾回收机制主要是通过引用计数（reference counting）来实现的。</p><p>当一个对象被创建时，会为该对象分配一块内存，并将该对象的引用计数设置为1。当其他对象引用该对象时，该对象的引用计数会相应地增加。当一个对象的引用计数变为0时，即没有任何对象引用该对象，Python的垃圾回收机制就会将该对象所占用的内存空间释放掉。</p><p>除了引用计数，Python还实现了一些辅助垃圾回收机制，如标记-清除（mark and sweep）和分代回收（generational collection）。</p><p>标记-清除是一种在引用计数无法处理某些对象时使用的机制。该机制通过遍历所有的对象，将所有仍然被引用的对象标记，然后清除所有未标记的对象来释放内存空间。</p><p>分代回收机制则是一种通过将对象分为几个代（generation），然后针对不同代采取不同的垃圾回收策略的机制。Python中一般将新建的对象放到第0代，如果在垃圾回收后仍然存活，则将其转移到更高一代。这种机制可以提高垃圾回收的效率和性能。</p><h2 id="量化常用Python技巧"><a href="#量化常用Python技巧" class="headerlink" title="量化常用Python技巧"></a>量化常用Python技巧</h2><p>Pandas.Series 对象、向量操作、布尔索引、rolling&#x2F;apply 函数、缺失&#x2F;异常值处理、Numpy 的常用函数等等</p><h2 id="单下划线和双下划线"><a href="#单下划线和双下划线" class="headerlink" title="单下划线和双下划线"></a>单下划线和双下划线</h2><p>1、__name__：一种约定，Python内部的名字，用来与用户自定义的名字区分开，防止冲突。</p><p>2、_name：一种约定，用来指定变量私有。</p><p>3、__name：解释器用_classname__name来代替这个名字用以区别和其他类相同的命名。</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>Python中的”dunder”是指”double underscore”，而”dunder method”则是指名称以双下划线开头和结尾的特殊方法（例如 <code>__init__</code>, <code>__str__</code>, <code>__add__</code>）。这些方法也被称为”magic methods”或”special methods”。这些魔术方法使得我们可以更方便地创建、操作和比较对象，提高了代码的可读性和可维护性。同时，魔术方法也使得Python类的使用更加接近自然语言的表达方式，从而提高了开发效率。</p><p>在Python中，dunder方法用于定义对象和类在不同情境下的行为。例如，<code>__init__</code>方法用于定义对象的初始化方式，<code>__str__</code>方法用于定义对象的字符串表示，<code>__add__</code>方法用于定义两个对象相加的行为。</p><p>Python会在特定情境下隐式调用dunder方法，例如当你使用”+”运算符将两个对象相加时，Python会寻找<code>__add__</code>方法来确定如何将这两个对象相加。</p><p>使用dunder方法的优点包括：</p><ol><li>一致性：dunder方法采用一致的命名规则，使人们易于理解它们的工作原理和用途。</li><li>可读性：通过实现dunder方法，你可以使你的代码更加可读和表达性更强。例如，为类定义一个<code>__str__</code>方法，可以定制对象作为字符串的表示方式。</li><li>定制化：dunder方法使你能够在不同情境下定制对象的行为。例如，通过定义<code>__len__</code>方法，你可以指定对象的长度，这对于实现自定义容器非常有用。</li><li>兼容性：通过实现合适的dunder方法，你可以使你的对象与Python内置函数和库兼容，从而节省时间和精力。</li></ol><p>The main purpose of dunder methods in Python is to enable custom behavior for objects in various contexts, such as arithmetic operations, string representation, comparison, and attribute access. Dunder methods are essential for implementing many of the built-in features of Python, such as operator overloading, slicing, iteration, and context managers.</p><p>The advantages of using dunder methods include:</p><ol><li>Consistency: Dunder methods follow a consistent naming convention, making it easy to understand how they work and where they are used.</li><li>Readability: By implementing dunder methods, you can make your code more readable and expressive. For example, defining a <code>__str__</code> method for a class allows you to customize how the object is represented as a string.</li><li>Customization: Dunder methods enable you to customize the behavior of your objects in various contexts. For example, by defining a <code>__len__</code> method, you can specify the length of an object, which can be useful for implementing custom containers.</li><li>Compatibility: By implementing the appropriate dunder methods, you can make your objects compatible with built-in Python functions and libraries, which can save you time and effort.</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++</title>
    <link href="/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA/C++/"/>
    <url>/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA/C++/</url>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h2><ul><li><strong>Encapsulation</strong>: Binding the data and function ; allow the user to hide the information for outside world and doesn’t allow the other user to change or modify the internal values of class. Can split a large program into a number of smaller, independent parts to reduce complexity. In a sentence, encapsulation is hiding the implementation details of a module from its user. Class is a type of encapsulation and abstraction.</li><li><strong>Inheritance</strong>: Classes are created in hierarchies, allows the structure and methods in one class to be passed down the hierarchy. That means less programming is required when adding functions to complex systems.</li><li><strong>Polymorphism</strong>: Single name can have multiple meanings, depends on the situation. Enable one entity to be used as a general category for different types of actions.</li></ul><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>类函数，子类可以各有各的实现，子类的虚函数还是虚函数</p><p>在运行期间确定对象实际类型</p><p>当一个类带有虚函数时，编译系统会为该类构造一个虚函数表（位于类内其他成员前面），是一个指针数组，存放每个虚函数的入口地址。系统在进行动态联编的时间开销很少，提高了多态性的效率</p><p>动态联编：对象指针通过虚指针找到虚表，从虚表中查找对应的虚函数地址进行调用</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>A memory location to store data for a program </p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是一个变量，可以包含其他变量和函数。C++ 中的对象可以定义为类的实例，类是一种用户定义的数据类型，其中包含属性和方法（函数）。对象是类的实例化，通过使用类定义来创建。</p><p>It is a variable that can contain other variables and functions. Objects in C++ can be defined as instances of a class, which is a user-defined data type that contains attributes and methods.</p><h2 id="指针-amp-引用"><a href="#指针-amp-引用" class="headerlink" title="指针 &amp; 引用"></a>指针 &amp; 引用</h2><p>指针是一个变量，它存储另一个变量的地址。我们可以通过指针访问和修改存储在另一个变量的地址处的值。指针通常用于动态分配内存、在函数之间传递参数和处理数组。</p><p>引用是一个别名，它给一个变量起了另一个名称。与指针不同，引用本身不是一个对象，而只是一个已经存在对象的别名。当我们使用引用时，实际上是在使用与引用绑定的变量。引用通常用于避免复制大型对象、创建函数的别名参数和使代码更易读。</p><p>A pointer is a variable that stores the address of another variable. We can access and modify the value stored at the address of another variable using a pointer. Pointers are typically used for dynamic memory allocation, passing parameters between functions, and processing arrays.</p><p>A reference is an alias that gives another name to a variable. Unlike a pointer, a reference itself is not an object, but rather just an alias for an existing object. When we use a reference, we are actually using the variable that is bound to the reference. References are typically used to avoid copying large objects, create alias parameters for functions, and make code more readable.</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ol><li><p>栈内存管理：C++通过栈来管理函数调用时的局部变量。每当函数被调用时，编译器会自动在栈上为其分配一段内存，当函数执行完毕后，这段内存会自动被释放。栈内存的大小是固定的，因此只适合存储大小已知且较小的数据。</p></li><li><p>堆内存管理：在C++中，我们可以使用new和delete关键字来动态地分配和释放堆内存。堆内存是由程序员手动申请的，在程序运行时动态分配和释放。由于堆内存的大小是动态变化的，因此适合存储较大的数据结构和对象。但是，需要注意的是，在使用完堆内存后，程序员需要手动释放这段内存，否则可能会造成内存泄漏的问题。</p></li><li><p>Stack memory management: C++ manages local variables during function calls via the stack. Each time a function is called, the compiler automatically allocates a block of memory on the stack, and the memory is automatically deallocated when the function completes. The size of the stack memory is fixed and is suitable for storing small data that has a known size.</p></li><li><p>Heap memory management: In C++, we can use the keywords “new” and “delete” to dynamically allocate and deallocate memory on the heap. Heap memory is allocated and deallocated manually by programmers during runtime. Since the size of heap memory is dynamic, it is suitable for storing larger data structures and objects. However, it is important to note that after using heap memory, programmers must manually release the memory to avoid memory leaks.</p></li></ol><h3 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h3><p>在C++中，栈（stack）和堆（heap）是两种内存分配方式。栈是由系统自动分配和释放的一块连续内存区域，用于存储函数调用时的局部变量、函数参数以及函数调用的返回地址等。栈的大小是固定的，它的管理方式是先进后出（LIFO）。这意味着最后被分配的内存先被释放，栈上的数据访问速度比堆要快，但是它的大小受限，不适合存储大量的数据。</p><p>堆是由程序员手动申请和释放的一块内存区域，它的大小不是固定的。程序员可以在运行时动态地分配和释放堆内存，用于存储较大的数据结构和对象等。堆的管理方式是任意的，它不像栈那样有固定的大小和访问顺序。在堆上分配内存需要显式地使用new操作符，而释放内存则需要使用delete操作符。如果程序员不释放已经分配的堆内存，就会导致内存泄漏的问题，因为堆上分配的内存不会自动释放。</p><p>需要注意的是，栈和堆的使用场景不同，程序员需要根据需要选择合适的内存分配方式。一般来说，较小的变量可以放在栈上，较大的数据结构和对象则需要放在堆上。同时，C++中也提供了一些辅助管理内存的工具，比如智能指针等。</p><p>In C++, the stack and the heap are two different memory allocation mechanisms. The stack is a contiguous block of memory that is automatically allocated and deallocated by the system, used to store local variables, function parameters, and return addresses during function calls. The size of the stack is fixed, and it is managed in a last-in, first-out (LIFO) manner. This means that the most recently allocated memory is released first. Accessing data on the stack is faster than the heap, but the stack has limited size and is not suitable for storing a large amount of data.</p><p>The heap is a block of memory that is manually allocated and deallocated by the programmer, and its size is not fixed. Programmers can dynamically allocate and deallocate memory on the heap during runtime, used to store large data structures and objects. The management of the heap is arbitrary, and it does not have a fixed size or access order like the stack. Allocating memory on the heap requires explicit use of the “new” operator, while releasing memory requires the “delete” operator. If the programmer does not release the allocated heap memory, it can cause memory leaks because the memory allocated on the heap is not automatically released.</p><p>It should be noted that the stack and the heap have different use cases, and programmers need to choose the appropriate memory allocation mechanism based on their needs. Generally, smaller variables can be placed on the stack, while larger data structures and objects should be placed on the heap. Additionally, C++ provides some tools to assist with memory management, such as smart pointers.</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>Memory leak would happen if the pointer is dereferenced while the memory of the dynamic variable that the pointer used to point to is not freed.</p><h2 id="浅拷贝-vs-深拷贝"><a href="#浅拷贝-vs-深拷贝" class="headerlink" title="浅拷贝 vs 深拷贝"></a>浅拷贝 vs 深拷贝</h2><ul><li><p>赋值：得到对象地址，共用对象内容，所有变量都会随之变化</p></li><li><p>浅拷贝：拷贝一层，更改<strong>引用类型</strong>（对象、数组都是引用类型）的<strong>数据</strong>时，拷贝的对象还是能被影响，如果拷贝的对象里还有子对象的话，那子对象拷贝其是也只是得到一个地址指向而已</p></li><li><p>深拷贝：递归地拷贝，更改引用类型原对象也不变</p></li><li><p>Assignment: Obtain the object address, share the object content, and all variables will change accordingly</p></li><li><p>Shallow copy: When copying a layer of data of a reference type (both objects and arrays are reference types), the copied object can still be affected. If there are any sub objects in the copied object, the sub object copy is only to obtain an address point</p></li><li><p>Deep copy: copy recursively, changing the reference type and keeping the original object unchanged</p></li></ul><p>浅拷贝创建一个新对象，该对象存储对原始对象相同内存位置的引用。换句话说，新对象只是指向原始对象内存位置的指针。对新对象进行的任何更改也会反映在原始对象上，反之亦然。这意味着浅拷贝并不创建原始对象的新实例，而只是创建对同一实例的新引用。当我们需要快速创建对象的副本而不在内存中创建新对象实例时，通常使用浅拷贝。</p><p>深拷贝则创建一个新对象并为其所有内容分配内存。在这种情况下，新对象与原始对象完全独立，对新对象进行的任何更改都不会影响原始对象。当我们需要修改对象的副本而不影响原始对象时，通常使用深拷贝。</p><p>A shallow copy creates a new object that stores references to the same memory locations as the original object. In other words, the new object is just a pointer to the original object’s memory locations. Any changes made to the new object will also be reflected in the original object, and vice versa. This means that shallow copy does not create a new instance of the original object, but rather a new reference to the same instance. Shallow copy is often used when we need to create a copy of an object quickly, without creating a new object instance in memory.</p><p>A deep copy, on the other hand, creates a new object and allocates memory for all its contents. In this case, the new object is completely independent of the original object, and any changes made to the new object will not affect the original object. Deep copy is often used when we need to modify a copy of an object without affecting the original object.</p><h2 id="Python-vs-C"><a href="#Python-vs-C" class="headerlink" title="Python vs C++"></a>Python vs C++</h2><ol><li><p>类型：C++是一种静态类型语言，这意味着变量必须在编译时声明其类型，并且在程序运行时无法更改类型。Python是一种动态类型语言，这意味着变量的类型在程序运行时可以更改，并且无需显式声明。</p></li><li><p>性能：由于C++是一种编译语言，它通常比Python更快。Python是一种解释型语言，通常比C++慢一些。但是，Python有许多用于优化性能的工具和库。</p></li><li><p>内存管理：在C++中，程序员必须手动管理内存，包括分配和释放内存。在Python中，内存管理是由解释器自动处理的，有垃圾回收机制。</p></li><li><p>python对函数的参数类型与返回值类型没有严格限定，c++有</p></li><li><p>python不需要定义变量就能使用，c++需要先定义才能使用</p></li><li><p>python中的变量作用域更广，c++中的作用域更严格</p><p>python中循环内部定义的变量在外面可以用，但是c++不行</p></li><li><p>Type: C++ is a statically typed language, which means that variables must declare their type at compile-time and cannot change type at runtime. Python is a dynamically typed language, which means that variables can change type at runtime and do not need to be explicitly declared.</p></li><li><p>Performance: Because C++ is a compiled language, it is generally faster than Python. Python is an interpreted language and is generally slower than C++. However, Python has many tools and libraries for optimizing performance.</p></li><li><p>Memory management: In C++, programmers must manually manage memory, including allocating and freeing memory. In Python, memory management is handled automatically by the interpreter, has garbage collection.</p></li></ol><h2 id="Python为什么比C-慢"><a href="#Python为什么比C-慢" class="headerlink" title="Python为什么比C++慢"></a>Python为什么比C++慢</h2><p>Python is interpreted and executed sentence by sentence, with a high degree of abstraction. C++ is compiled first and converted to machine code, without dynamic typing or dynamic checking.</p><h2 id="C-11新特性"><a href="#C-11新特性" class="headerlink" title="C++11新特性"></a>C++11新特性</h2><ol><li><p>auto关键字：可以用于自动推断变量类型，减少重复代码，提高代码可读性。</p></li><li><p>nullptr关键字：代表空指针，替代了NULL和0。</p></li><li><p>Range-based for循环：一种新的循环语法，可以用：遍历数组、向量、列表等容器中的元素。</p></li><li><p>Lambda表达式（lambda expression）：一种轻量级的匿名函数（anonymous function），可以在需要时动态创建，减少了代码量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> lambda = [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> a + b; &#125;;<br>std::cout &lt;&lt; <span class="hljs-built_in">lambda</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 输出3</span><br></code></pre></td></tr></table></figure></li><li><p>Move语义：通过std::move函数，可以将资源的所有权从一个对象移动到另一个对象，减少了不必要的拷贝构造函数和析构函数的调用，提高了程序效率。</p></li><li><p>右值引用：提供了一种新的引用类型，可以绑定到临时对象和表达式上，使得临时对象的创建和销毁更加高效。</p></li><li><p>列表初始化：一种新的初始化语法，可以通过{}对列表进行初始化，使得代码更加简洁和易于理解。</p></li><li><p>智能指针：提供了一种管理动态内存的方式，可以自动进行内存释放，避免内存泄漏和悬空指针。std::unique_ptr、std::shared_ptr和std::weak_ptr</p></li><li><p>constexpr</p><p>constexpr修饰的是真正的常量，它会在编译期间就会被计算出来，整个运行过程中都不可以被改变，constexpr可以用于修饰函数，这个函数的返回值会尽可能在编译期间被计算出来当作一个常量，但是如果编译期间此函数不能被计算出来，那它就会当作一个普通函数被处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;<br>   <span class="hljs-built_in">func</span>(i);<span class="hljs-comment">// 普通函数</span><br>   <span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">// 编译期间就会被计算出来</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>final &amp; override：final修饰一个类或虚函数，表示禁止该类进一步派生和虚函数的进一步重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Base</span> <span class="hljs-keyword">final</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;base&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base&#123; <span class="hljs-comment">// 编译失败，final修饰的类不可以被继承</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;derived&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>override用于修饰派生类中的成员函数，标明该函数重写了基类函数，如果一个函数声明了override但父类却没有这个虚函数，编译报错，使用override关键字可以避免开发者在重写基类函数时无意产生的错误</p></li></ol><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p>unique_ptr是一种独占式智能指针，它拥有被指向对象的独占权，不能被拷贝，只能移动。当unique_ptr被销毁时，它所指向的对象也将被销毁。unique_ptr适用于管理单个对象的所有权，是一种安全、高效的内存管理方式。</p><p>unique_ptr的主要作用是：</p><ul><li>管理动态分配的内存对象的生命周期，可以确保内存的正确释放。</li><li>通过移动语义，实现所有权的转移，防止悬空指针的出现，避免内存泄漏。</li></ul><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p>shared_ptr是一种共享式智能指针，多个shared_ptr可以共享同一块内存，可以记录有多少个shared_ptr共同拥有这块内存。当共享计数器归零时，该内存将被自动销毁。shared_ptr支持拷贝和移动操作。</p><p>shared_ptr的主要作用是：</p><ul><li>管理动态分配的内存对象的生命周期，可以确保内存的正确释放。</li><li>可以在多个地方共享同一份内存资源，避免了内存多次释放或者使用悬空指针的问题。</li></ul><p>shared_ptr 通过一个控制块来实现共享计数器的维护，该控制块包含有关指向对象的引用计数和删除器等信息。</p><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p>weak_ptr是一种弱引用智能指针，它不会增加被指向对象的引用计数，也不拥有对象的所有权，不能直接访问其指向的对象，必须通过lock()成员函数获取一个shared_ptr才能访问。当shared_ptr被销毁时，weak_ptr不会影响该对象的销毁。要与std::shared_ptr一起使用，一个std::weak_ptr对象看作是std::shared_ptr对象管理的资源的观察者，不影响共享资源的生命周期</p><p>weak_ptr的主要作用是：</p><ul><li>解决shared_ptr的循环引用问题，避免内存泄漏。</li><li>用于观察shared_ptr所管理的对象，防止shared_ptr被释放后，还有其他地方使用悬空指针的问题。</li></ul><p>weak_ptr通过lock()成员函数可以获取一个shared_ptr，用于访问被指向的对象，如果没有可用的shared_ptr，则lock()会返回一个空的shared_ptr。</p><h5 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h5><p>循环引用是指两个或多个对象之间相互引用，导致它们的引用计数不为0，无法被自动释放，从而导致内存泄漏。在使用<code>shared_ptr</code>时，如果出现循环引用，将会导致对象无法被正确地释放，从而出现内存泄漏问题。</p><p><code>weak_ptr</code>可以通过对<code>shared_ptr</code>进行弱引用来解决循环引用问题。<code>weak_ptr</code>可以访问<code>shared_ptr</code>所指向的对象，但不会改变其引用计数。当<code>shared_ptr</code>所指向的对象被释放时，所有的<code>weak_ptr</code>都会自动失效，无需手动释放内存。</p><h4 id="悬空指针-dangling-pointer"><a href="#悬空指针-dangling-pointer" class="headerlink" title="悬空指针 dangling pointer"></a>悬空指针 dangling pointer</h4><p>C++中的悬空指针是指一个指针变量指向了已经被释放或者不存在的内存地址。</p><p>当一个指针变量指向一个已经释放的内存地址时，该指针变量就变成了一个悬空指针。这种情况可能会导致程序崩溃或者出现其他错误，因为程序试图在无效的内存地址上执行操作。</p><p>悬空指针通常是由于程序员没有正确管理内存所导致的，例如在使用 <code>delete</code> 关键字释放指针指向的内存后，却继续使用指针变量，这会导致指针变量成为悬空指针。</p><p>为了避免悬空指针，程序员应该在使用完指针后，及时将其指向 <code>nullptr</code> 或者重新赋值为有效的内存地址。此外，使用智能指针和 RAII 等技术也可以有效避免悬空指针的问题。</p><h3 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a>std::move</h3><h4 id="move的作用"><a href="#move的作用" class="headerlink" title="move的作用"></a>move的作用</h4><p><code>std::move</code> 是 C++11 标准中的一个函数模板，用于将对象的值转移（移动）到另一个对象中，同时将原来对象的值置为默认值（通常是零值或者空值）。这个操作称为“移动语义”，可以显著提高程序的性能。</p><p>在 C++ 中，当我们需要复制一个对象时，我们通常会使用拷贝构造函数或拷贝赋值运算符。但是在某些情况下，我们并不需要完全复制一个对象，而只需要转移它的资源所有权，即将指向这些资源的指针或引用从原来的对象中“移动”到新的对象中。这种情况下，使用 <code>std::move</code> 可以实现“移动语义”。</p><p>具体来说，使用 <code>std::move</code> 可以将一个左值转换为右值引用，以便进行移动语义操作。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v1 &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v2 &#123;std::<span class="hljs-built_in">move</span>(v1)&#125;;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;v1 size = &quot;</span> &lt;&lt; v1.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl; <span class="hljs-comment">// 输出 0</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;v2 size = &quot;</span> &lt;&lt; v2.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl; <span class="hljs-comment">// 输出 3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们创建了两个 <code>std::vector&lt;int&gt;</code> 对象 <code>v1</code> 和 <code>v2</code>。然后，我们使用 <code>std::move</code> 将 <code>v1</code> 的资源所有权转移给 <code>v2</code>，从而避免了不必要的拷贝操作，并且可以提高程序的性能。最后，我们打印了 <code>v1</code> 和 <code>v2</code> 的大小，可以看到 <code>v1</code> 的大小为 0，因为其资源已经被移动到了 <code>v2</code> 中。</p><p>需要注意的是，使用 <code>std::move</code> 不会真正地移动数据，而只是将对象的指针或引用转移到另一个对象中。因此，在移动完成后，原来的对象可能处于未定义的状态，不应该再使用它。</p><p>The purpose of <code>std::move</code> is to allow objects to be efficiently moved or transferred between scopes, rather than copied. It does this by converting an lvalue to an rvalue reference, which enables the move constructor or move assignment operator to be called, if they exist. This can lead to improved performance in cases where copying is expensive or unnecessary.</p><h4 id="move和拷贝的比较"><a href="#move和拷贝的比较" class="headerlink" title="move和拷贝的比较"></a>move和拷贝的比较</h4><ol><li>避免了不必要的拷贝操作：使用拷贝构造函数或拷贝赋值运算符进行复制操作时，会将对象的数据逐一复制到新的对象中，这个过程可能非常耗时。而使用 <code>std::move</code> 可以将对象的资源所有权转移到新的对象中，避免了这个耗时的复制操作。</li><li>可以利用移动构造函数和移动赋值运算符：对于许多对象，移动操作的时间复杂度比拷贝操作低很多，因为移动操作不需要复制数据，而只需要转移指针或引用。使用 <code>std::move</code> 可以将对象转换为右值引用，从而让编译器使用移动构造函数或移动赋值运算符，提高程序的性能。</li></ol><p>Using <code>std::move</code> can be better than direct copying because it avoids unnecessary copying operations, which can be slow and resource-intensive. Instead, it transfers ownership of an object’s resources to a new object, which can be faster and more efficient. Additionally, <code>std::move</code> can take advantage of move constructors and move assignment operators, which can be faster than copy constructors and copy assignment operators for many objects.</p><h4 id="move和指针的区别"><a href="#move和指针的区别" class="headerlink" title="move和指针的区别"></a>move和指针的区别</h4><p><code>std::move</code> 和指针的主要区别是，<code>std::move</code> 本质上是将一个左值强制转换为右值引用，从而实现“移动语义”，而指针只是一个指向内存地址的变量，没有实现“移动语义”。</p><p>具体来说，使用 <code>std::move</code> 可以将对象的资源所有权转移给另一个对象，同时将原来对象的值置为默认值，这个过程被称为“移动语义”。而指针只是一个变量，它存储了指向某个内存地址的值。对指针进行赋值或传递时，只是将指针的值传递给另一个变量或函数，不会影响指针所指向的内存地址的内容或所有权。</p><p>另外，使用指针需要自己手动管理内存分配和释放，容易引起内存泄漏或悬空指针等问题。而使用 <code>std::move</code> 可以避免这些问题，因为移动语义可以确保资源的所有权被正确地管理。</p><p>he main difference between <code>std::move</code> and a pointer is that <code>std::move</code> provides move semantics, while a pointer only stores a memory address. <code>std::move</code> enables objects to be transferred between scopes more efficiently, by transferring ownership of an object’s resources to a new object.</p><p>A pointer only stores the address of an object in memory, and does not provide any special semantics for transferring ownership or managing resources. Additionally, using pointers requires manual memory management, which can be error-prone and lead to memory leaks or dangling pointers.</p><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><p>左值表示一个表达式所代表的内存位置，即一个可寻址的内存区域，可以被修改。左值可以出现在赋值操作的左边，表示将右边的值赋给左边的内存位置，也可以出现在表达式的任何位置。</p><p>例如，变量、数组元素和结构体成员都是左值。</p><p>右值表示表达式的值，即一些无法被修改的临时数据，通常出现在赋值操作的右边，表示将该值赋给左边的内存位置，或者在表达式中的常量或计算结果。</p><p>例如，字面常量、函数返回值和表达式计算结果都是右值。</p><p><strong>概念1：</strong></p><p>左值：可以放到等号左边的东西叫左值。</p><p>右值：不可以放到等号左边的东西就叫右值。</p><p><strong>概念2</strong>：</p><p>左值：可以取地址并且有名字的东西就是左值。</p><p>右值：不能取地址的没有名字的东西就是右值。</p><h4 id="将亡值"><a href="#将亡值" class="headerlink" title="将亡值"></a>将亡值</h4><p>将亡值是指C++11新增的和右值引用相关的表达式，通常指将要被移动的对象、T&amp;&amp;函数的返回值、std::move函数的返回值、转换为T&amp;&amp;类型转换函数的返回值，将亡值可以理解为即将要销毁的值，通过“盗取”其它变量内存空间方式获取的值，在确保其它变量不再被使用或者即将被销毁时，可以避免内存空间的释放和分配，延长变量值的生命周期，常用来完成移动构造或者移动赋值的特殊任务。</p><h4 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h4><p>如果使用右值引用，那表达式等号右边的值需要时右值，可以使用std::move函数强制把左值转换为右值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> &amp;&amp;b = a; <span class="hljs-comment">// error, a是左值</span><br><span class="hljs-type">int</span> &amp;&amp;c = std::<span class="hljs-built_in">move</span>(a); <span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><p>右值引用具有移动语义，可以将一个右值引用绑定到临时对象上，然后将这个对象的状态转移给新的对象。这种操作称为移动语义。</p><p>移动语义可以提高程序的效率和性能，尤其是在进行资源管理时。例如，一个对象在拷贝时需要分配内存，而移动时只需要将指向该内存的指针转移即可，避免了复制内存的开销。</p><h5 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h5><p>移动语义，可以理解为转移所有权，之前的拷贝是对于别人的资源，自己重新分配一块内存存储复制过来的资源，而对于移动语义，类似于转让或者资源窃取的意思，对于那块资源，转为自己所拥有，别人不再拥有也不会再使用，通过C++11新增的移动语义可以省去很多拷贝负担，通过移动构造函数。</p><p>移动语义仅针对于那些实现了移动构造函数的类的对象，对于那种基本类型int、float等没有任何优化作用，还是会拷贝，因为它们实现没有对应的移动构造函数。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>神经网络</title>
    <link href="/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul><li><p>神经元：函数（第一层是每一个像素点，隐层是零件一步步组装的过程）</p></li><li><p>权重：关注什么样的像素图案</p></li><li><p>bias：加权和要有多大才能使神经元的激活有意义</p></li></ul><p>$$<br>a^{(1)}&#x3D;\sigma(Wa^{(0)}+b)<br>$$</p><p>其中$a$是某一层的神经元向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">feedforward</span>(<span class="hljs-params">self, a</span>):<br>        <span class="hljs-keyword">for</span> b, w <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.biases, self.weights):<br>            a = sigmoid(np.dot(w, a) + b)<br>        <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><ul><li>ReLU函数$ReLU(a)&#x3D;max(0, a)$比sigmoid函数更好训练</li></ul><h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>单个样本的cost：</p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220322214549.png" style="zoom:50%;" /><p>损失：样本的平均cost</p><p>函数的梯度指出了函数最陡的增长方向，所以沿梯度的负方向走函数值下降得最快</p><h3 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220323150037.png"></p><ul><li>随机梯度下降：划分minibatch（比如一个minibatch是100个样本），用minibatch的平均改变值代替负梯度（全部样本的平均改变值）</li></ul><p>【醉汉下山法】</p><p>假设每层只有1个神经元：</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220323151113.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220323151332.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220323151213.png"></p><p>负梯度：</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220323151247.png"></p><p>拓展到多个神经元：</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220323151620.png"></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><ul><li>非线性：导数不是常数，多层网络不退化成单层网络</li><li>几乎处处可为：保证优化中梯度的可计算性</li><li>计算简单</li></ul><h4 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h4><p>缺点：</p><ul><li>计算量大，反向传播求误差梯度时，求导复杂</li><li>反向传播的时候，很容易出现梯度消失的情况，从而无法完成深度神经网络的训练（导数从0开始，很快又趋近于0）</li></ul><h4 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a>ReLU函数</h4><p>优点：梯度不会消失，计算速度很快，收敛很快</p><p>缺点：输出不是0均值</p><p>dead relu problem，某些神经元可能永远不会激活，导致参数不会更新</p><h4 id="softmax函数"><a href="#softmax函数" class="headerlink" title="softmax函数"></a>softmax函数</h4><p>multiclassification</p><h4 id="tanh函数"><a href="#tanh函数" class="headerlink" title="tanh函数"></a>tanh函数</h4><p>是0均值</p><p>梯度消失问题，但是缓解了一点</p><h3 id="层"><a href="#层" class="headerlink" title="层"></a>层</h3><p>图像处理：</p><p>input→（卷积层$\times$N+池化层）$\times$M→全连接层$\times$K→output</p><h4 id="全连接层-Fully-Connected-Layer"><a href="#全连接层-Fully-Connected-Layer" class="headerlink" title="全连接层 Fully Connected Layer"></a>全连接层 Fully Connected Layer</h4><h4 id="卷积层-Convolutional-layer"><a href="#卷积层-Convolutional-layer" class="headerlink" title="卷积层 Convolutional layer"></a>卷积层 Convolutional layer</h4><ul><li>局部感知野</li><li>参数共享</li></ul><h4 id="池化层-pooling-layer"><a href="#池化层-pooling-layer" class="headerlink" title="池化层 pooling layer"></a>池化层 pooling layer</h4><ul><li>使特征图变小，简化网络</li><li>特征压缩，提取主要特征</li></ul><p>常用池化层：</p><ul><li>最大池化</li><li>平均池化</li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li><p>epoch：用训练集所有样本对模型进行一次完整训练</p></li><li><p>batch：用训练集中一小部分样本对模型权重进行一次反向传播的参数更新</p></li><li><p>iteration：用一个batch的数据对模型进行一次参数更新的过程</p></li></ul><p>梯度下降：</p><table><thead><tr><th>梯度下降方式</th><th>Training Set Size</th><th>Batch Size</th><th>Number of Batches</th></tr></thead><tbody><tr><td>BGD</td><td>N</td><td>N</td><td>1</td></tr><tr><td>SGD</td><td>N</td><td>1</td><td>N</td></tr><tr><td>Mini-Batch</td><td>N</td><td>B</td><td>N&#x2F;B</td></tr></tbody></table><h2 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h2><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h3><p>$$<br>a^{(t)}&#x3D;tanh(W_{ax}x^{(t)}+W_{aa}a^{(t-1)}+b_a)<br>$$</p><p>$$<br>\hat{y}^{(t)}&#x3D;softmax(W_{ya}a^{(t)}+b_y)<br>$$</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220324153051.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220324154733.png"></p><p>特点：</p><ul><li>串联结构，后面结果的生成要参考前面的信息</li><li>所有特征共享同一套参数<ul><li>面对不同的输入（两个方面），能学到不同的相应的结果</li><li>极大减少了训练参数量</li><li>输入和输出数据在不同例子中可以有不同长度</li></ul></li></ul><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>单个时间步的损失函数：<br>$$<br>L_t(\hat{y}_t,y_t)&#x3D;-y_tlog y_t-(1-y_t)log(1-y_t)<br>$$</p><p>整个序列的损失函数：所有时间步的损失求和</p><p>$$<br>L(\hat{y},y)&#x3D;\sum^T_{t&#x3D;1}L_t(\hat{y}_t,y_t)<br>$$</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><h5 id="梯度消失"><a href="#梯度消失" class="headerlink" title="梯度消失"></a>梯度消失</h5><p>当序列太长时，连乘过多，容易导致梯度消失，无法将信息传递过去，参数更新只能捕捉到局部依赖关系，没法再捕捉序列之间的长期关联或依赖关系。这会导致渐变在向后传播时呈指数级收缩。由于梯度极小，内部权重几乎没有调整，因此较早的层无法进行任何学习。<br>$$<br>\frac{\partial L_t}{\partial W_x}&#x3D;\sum^t_{k&#x3D;1}[\frac{\partial L_t}{\partial O_t}\frac{\partial O_t}{\partial S_t}(\prod^t_{j&#x3D;t+1-k}\frac{\partial tanh(\theta_j)}{\partial \theta_j})X_{t+1-k}W_s^{k-1}]<br>$$<br>由于$W_s^{k-1}$很小的时候连乘会趋于0，因此会梯度消失</p><p>梯度消失解决办法：</p><ul><li><p>选择relu等梯度大部分落在常数上的激活函数。relu函数的导数在正数部分是恒等于1的，因此在深层网络中使用relu激活函数就不会导致梯度消失的问题。</p></li><li><p>batch normalization</p><p>BN就是通过对每一层的输出规范为均值和方差一致的方法，消除了权重参数放大缩小带来的影响，进而解决梯度消失的问题，或者可以理解为BN将输出从饱和区拉到了非饱和区。采用 Batch Normalization 层，对网络中计算得到中间值进行归一化，使得中 间计算结果的取值在均值为 0，方差为 1 这样的分布内。那么此时，在 sigmoid 和 tanh 中，函数取值处于中间变化较大的部分，梯度取值也相对较大</p></li></ul><h5 id="梯度爆炸"><a href="#梯度爆炸" class="headerlink" title="梯度爆炸"></a>梯度爆炸</h5><p>使网络变得不稳定。在极端情况下，权重的值变得非常大，以至于溢出，导致NaN值</p><p>解决办法：</p><ul><li>梯度修剪，观察梯度向量，如果大于某个阈值，缩放梯度向量，保证它不会太大</li><li>权重正则化：检查网络权重的大小，并惩罚产生较大权重值的损失函数</li><li>改变损失函数：把sigmoid改为ReLU，relu函数的导数在正数部分是恒等于1的，因此在深层网络中使用relu激活函数就不会导致梯度消失的问题</li></ul><h3 id="LSTM-Long-Short-Term-Memory"><a href="#LSTM-Long-Short-Term-Memory" class="headerlink" title="LSTM Long Short-Term Memory"></a>LSTM Long Short-Term Memory</h3><p>RNN：想把所有东西记住，不管有没有用</p><p>LSTM：设计记忆细胞，具备选择性记忆的功能，记忆重要信息，过滤掉噪声信息，减轻记忆负担</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220324162626.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220324164635.png"></p><ul><li>$C_t$，记忆细胞：在LSTM每个时间步里面都有一个以及细胞，让LSTM有能力自由选择每个时间步里记忆的内容。</li><li>$h_t$，状态：【本门考试分数】</li><li>$f_t$，遗忘门：[0, 1]的向量，选择性遗忘上一个时间步带来的记忆【遗忘复习高数时对线代无关的记忆】</li><li>$i_t$，输入门：[0, 1]的向量，选择性保留这一个时间步新生成的记忆（来自$X_t$）【复习线代获得的记忆】</li></ul><p>$$<br>C_t&#x3D;f_tC_{t-1}+i_t\tilde{C_t}<br>$$</p><ul><li>$o_t$，输出门：【只用到其中一部分记忆用来答题】</li><li>tanh：【记忆转化为答题能力的过程】</li></ul><h4 id="LSTM优点"><a href="#LSTM优点" class="headerlink" title="LSTM优点"></a>LSTM优点</h4><ul><li>缓解RNN的梯度消失问题：通过调节$W_{hf},W_{hi},W_{hg}$可以灵活控制$\frac{\partial C_j}{\partial C_{j-1}}$的值，当要从n时刻长期记忆某个东西直到m时刻时，该路径上的$\prod_{t&#x3D;n}^m\limits \frac{\partial C_j}{\partial C_{j-1}}\approx 1\times1\times…\times1$</li></ul><h4 id="解决LSTM梯度消失问题"><a href="#解决LSTM梯度消失问题" class="headerlink" title="解决LSTM梯度消失问题"></a>解决LSTM梯度消失问题</h4><ol><li>使用门控循环单元（GRU）替代LSTM。GRU也是一种递归神经网络，可以在处理序列数据时具有与LSTM相似的记忆能力，但是GRU只有两个门控单元，因此具有更少的参数，同时也更容易训练。</li><li>使用长短期记忆网络（LSTM）的变种，如Peephole LSTM，对输入门、遗忘门和输出门进行扩展，以便更好地控制信息的流动，从而减少梯度消失的问题。</li><li>对于输入数据进行归一化处理，将其缩放到一个较小的范围内。这有助于减少梯度消失问题的影响，并使神经网络更容易训练。</li><li>使用梯度裁剪技术。这种方法可以在训练过程中对梯度进行剪切，使其不会超出一个预定的范围。这有助于避免梯度爆炸问题，并减少梯度消失的问题。</li><li>采用注意力机制（Attention Mechanism）。该方法能够使网络在处理序列数据时更加关注重要的部分，并将注意力集中在最相关的信息上，从而避免了长序列中梯度消失的问题。</li></ol><h3 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h3><p>序列预测任务是给定了n个词，去预测第n+1个词，把关注点放在前面n个词的哪一些。引入注意力机制可以更好地解释应该重点关注前面序列里的哪一些</p><h4 id="transformer和LSTM区别"><a href="#transformer和LSTM区别" class="headerlink" title="transformer和LSTM区别"></a>transformer和LSTM区别</h4><p>RNN是串行训练，要把上一步输入全部输入进来才能做下一步训练，transformer加了注意力机制可以并行训练，没有记忆力这个东西，只是通过注意力机制去找到这个东西是要关注前面的哪一些词，但并没有记得之前一共发生过什么东西</p><p>Transformer和LSTM是用于处理序列数据的两种不同的神经网络架构，它们有以下几个区别：</p><ol><li>结构不同：LSTM是一种递归神经网络，使用门控单元（如输入门、遗忘门、输出门）来控制序列中信息的流动。而Transformer则是一种基于自注意力机制的神经网络，使用多头注意力机制来对序列数据进行编码。</li><li>并行性不同：由于LSTM的递归结构，每个时间步的计算都依赖于前一个时间步的输出。这意味着LSTM在计算时必须按照时间步序列化计算，无法进行并行化处理。相比之下，Transformer的计算是全局的，可以并行计算，从而更加高效。</li><li>记忆能力不同：LSTM通过门控单元来控制信息的流动，从而具有很强的记忆能力，能够处理长序列数据。而Transformer使用自注意力机制，可以同时考虑序列中的所有位置，从而不需要像LSTM一样依赖于递归计算，因此在长序列上表现更好。</li><li>可解释性不同：由于LSTM的递归结构，很难对其内部的计算过程进行解释。而Transformer的注意力机制可以将模型的注意力集中在输入序列中的不同部分，因此更容易解释模型的决策过程。</li></ol><p>总的来说，LSTM适合处理单向、多层次、长期的时间序列数据，例如语音识别和自然语言处理。而Transformer适合处理双向、并行化、全局的时间序列数据，例如机器翻译和自然语言生成。</p><h2 id="生成对抗网络"><a href="#生成对抗网络" class="headerlink" title="生成对抗网络"></a>生成对抗网络</h2><h3 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329111525.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329112132.png"></p><ul><li>全连接层升维</li><li>把7$\times$7的数据变成28$\times$28的图像：插值（UpSampling2D）&#x2F;反卷积</li></ul><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329112427.png"></p><ul><li>图像二分类：表示层（卷积池化卷积池化），应用层</li></ul><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329112632.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329112702.png"></p><ol><li>固定G，把真实样本和generate的样本输入D，训练D</li><li>固定D，训练G</li><li>输入噪声给G，生成样本</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329113720.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329113745.png"></p><p>原问题化为KL散度的问题：</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329153116.png"></p><ul><li>生成器没生成真实的样本：惩罚小</li><li>生成器生成不真实的样本：惩罚大</li></ul><p>loss偏向于生成“稳妥”的样本</p><h3 id="WGAN"><a href="#WGAN" class="headerlink" title="WGAN"></a>WGAN</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329153349.png"></p><ul><li>训练稳定性大幅增长</li></ul><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329153517.png"></p><h3 id="CGAN"><a href="#CGAN" class="headerlink" title="CGAN"></a>CGAN</h3><p>输入G的不只是噪声，还有条件（比如红头发），把概率分布改为条件概率分布</p><h3 id="DCGAN"><a href="#DCGAN" class="headerlink" title="DCGAN"></a>DCGAN</h3><p>卷积神经网络+对抗神经网络</p><ul><li>在不改变GAN原理的情况下，增加增强稳定性的tricks</li></ul><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220329113339.png"></p><h2 id="防止过拟合"><a href="#防止过拟合" class="headerlink" title="防止过拟合"></a>防止过拟合</h2><ul><li>池化</li><li>dropout</li><li>early stopping</li><li>正则化</li></ul><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>强化学习有很多状态，要学习在每个状态下要采取什么动作。</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20220325165554.png"></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面试题</title>
    <link href="/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>Logistic回归的损失函数和梯度分别是多少、SVM的数学推导、GBDT回归的梯度代表什么</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>以下是进行预测任务特征工程时需要考虑的关键步骤：</p><ol><li>数据探索：在开始进行特征工程之前，需要探索数据集并了解不同变量之间的关系。这可以涉及可视化数据，计算汇总统计信息，识别潜在的相关性或模式。</li><li>特征选择：并非所有特征都与特定预测任务相关或有用。特征选择涉及识别最重要的特征，并删除冗余、无关或噪声较大的特征。这可以使用相关性分析、特征重要性排名或基于模型的选择等方法实现。</li><li>特征提取：有时可用的特征可能不够信息丰富，或者需要转换以显示有用的模式或关系。特征提取涉及从现有特征中创建新特征，例如计算统计量、跨时间段聚合信息或将分类变量转换为数值形式。</li><li>特征缩放：许多机器学习模型要求特征在相似范围内进行缩放，以获得良好的性能。特征缩放涉及将数据规范化，以减少异常值的影响并确保所有特征具有相似的范围。</li><li>特征编码：分类变量在预测任务中可能会出现问题，因为需要将它们转换为数值形式。特征编码涉及将分类变量转换为可用于机器学习模型的形式，例如进行独热编码或使用标签编码。</li><li>迭代细化：特征工程通常是一个迭代过程，在每一轮特征工程后，需要监视模型的性能。这可以帮助识别需要进一步改进和微调特征工程过程的领域。</li></ol><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><ol><li><p>相关性分析：计算每个特征与目标变量之间的相关系数，并排除与目标变量相关性较低的特征。</p></li><li><p>方差分析：计算每个特征的方差，并排除方差较小的特征，这些特征可能对结果没有显著贡献。</p></li><li><p>特征重要性：使用决策树等算法，计算每个特征的重要性，排除重要性较低的特征。</p></li><li><p>逐步回归：从所有特征开始，每次迭代去掉最不重要的特征，直到剩下较为重要的特征。</p></li><li><p>L1正则化：使用L1正则化方法，使得模型的权重矩阵中有许多权重为0，因此可以通过选择非零权重对应的特征来筛选特征。</p></li><li><p>PCA降维：使用主成分分析(PCA)等方法将特征降维，选择最重要的成分作为新的特征，从而达到特征筛选的目的。</p></li><li><p>Correlation analysis: Calculate the correlation coefficient between each feature and the target variable, and exclude features with low correlation.</p></li><li><p>Analysis of variance (ANOVA): Calculate the variance of each feature and exclude those with small variances, which may not contribute significantly to the outcome.</p></li><li><p>Feature importance: Use algorithms such as decision trees to calculate the importance of each feature, and exclude those with low importance.</p></li><li><p>Stepwise regression: Start with all features and iteratively remove the least important feature until only the most important features remain.</p></li><li><p>L1 regularization: Use L1 regularization to force many weights in the model’s weight matrix to be zero. This can be used to select the corresponding non-zero features.</p></li><li><p>PCA dimensionality reduction: Use principal component analysis (PCA) to reduce the dimensionality of the features and select the most important components as new features.</p></li></ol><h4 id="ANOVA方差分析"><a href="#ANOVA方差分析" class="headerlink" title="ANOVA方差分析"></a>ANOVA方差分析</h4><p>ANOVA(Analysis of Variance，方差分析)是一种用于比较两个或多个组之间差异的统计方法。其原理基于方差分解的思想，将总方差分解为两部分，一部分是由于组间差异所导致的方差，另一部分是由于组内差异所导致的方差。如果组间方差显著大于组内方差，则说明不同组之间的差异是显著的。</p><p>ANOVA (Analysis of Variance) is a statistical method used to compare differences between two or more groups. Its principle is based on the idea of variance decomposition, which decomposes the total variance into two parts: one due to differences between groups and the other due to differences within groups. If the variance between groups is significantly greater than the variance within groups, then the differences between groups are considered significant.</p><p>ANOVA可以用来衡量不同特征对于目标变量的影响程度，因此可以用于特征选择。在进行ANOVA特征选择时，我们将特征的变量分为不同组，并计算各组的平均值和方差，然后计算F值。F值越大，表示该特征与目标变量之间的差异越大，因此越有可能是重要特征。</p><p>在ANOVA中，我们通常将数据分为k个组，每个组有n个样本。设$x_{ij}$表示第i个组中第j个样本的观测值，$\overline{x}_i$表示第i个组的平均值，$\overline{x}$表示所有观测值的平均值。则总方差可以表示为：</p><p>$$<br>SS_{total} &#x3D; \sum_{i&#x3D;1}^k \sum_{j&#x3D;1}^n (x_{ij} - \overline{x})^2<br>$$</p><p>组间方差可以表示为：</p><p>$$<br>SS_{between} &#x3D; n \sum_{i&#x3D;1}^k (\overline{x}_i - \overline{x})^2<br>$$</p><p>组内方差可以表示为：</p><p>$$<br>SS_{within} &#x3D; \sum_{i&#x3D;1}^k \sum_{j&#x3D;1}^n (x_{ij} - \overline{x}_i)^2<br>$$</p><p>然后我们可以计算方差比值$F$，它是组间方差与组内方差的比值：</p><p>$$<br>F &#x3D; \frac{SS_{between} &#x2F; (k-1)}{SS_{within} &#x2F; (n-k)}<br>$$</p><p>其中，$k-1$和$n-k$分别为自由度，自由度表示在统计推断中独立变化的变量数量。如果$F$值越大，则说明组间方差越大，不同组之间的差异越显著。</p><p>在ANOVA中，我们通常还需要进行方差分析表的构建，方差分析表展示了各种方差的计算结果、自由度和均方值，以及$F$值和$p$值，用于判断组间差异的显著性。</p><h2 id="数据不服从高斯分布为什么也可以ML"><a href="#数据不服从高斯分布为什么也可以ML" class="headerlink" title="数据不服从高斯分布为什么也可以ML"></a>数据不服从高斯分布为什么也可以ML</h2><p>渐进理论，样本量足够大，用中心极限定理可以近似高斯分布</p><p>机器学习算法的理论基础通常建立在样本满足一些假设条件的基础上，例如正态分布或同方差性等。然而，在实际应用中，数据往往不满足这些假设条件，特别是在大数据集中，这种假设条件往往难以满足。因此，机器学习算法可以用于非正态分布数据。</p><p>以下是一些原因：</p><ol><li>机器学习算法的鲁棒性：许多机器学习算法具有一定的鲁棒性，即它们不会受到数据分布的轻微偏差的影响，而且能够在许多实际应用中表现出良好的性能。例如，决策树、随机森林和支持向量机等算法经常被用于非正态分布数据。</li><li>数据预处理：数据预处理是数据科学中的重要步骤。在处理非正态分布数据时，可以通过一些预处理技术来使数据更适合机器学习算法。例如，可以进行对数变换、幂变换或归一化等处理，以使数据更符合算法假设条件。这些技术通常可以在保持数据质量的同时提高算法的性能。</li><li>非参数方法：非参数方法是指不需要假设数据分布的一类机器学习算法。这些算法可以对非正态分布的数据建模，并能够在一些领域中取得良好的性能。例如，K近邻、神经网络和决策树等算法不需要数据分布假设，因此可以用于非正态分布数据。</li></ol><p>综上所述，尽管机器学习算法的理论基础建立在一些假设条件的基础上，但在实际应用中，这些假设条件经常难以满足。在处理非正态分布数据时，可以使用一些机器学习算法和数据预处理技术来提高模型性能，并在许多实际应用中获得良好的结果。</p><h2 id="bias-variance-tradeoff"><a href="#bias-variance-tradeoff" class="headerlink" title="bias variance tradeoff"></a>bias variance tradeoff</h2><ul><li>bias：预测值的期望和实际值的差</li><li>variance：预测值的方差</li></ul><p>嘈杂的数据集：</p><ul><li>模型复杂度越大，偏差(Bias)越小</li><li>模型复杂度越大，方差(Variance)越大</li></ul><p>通常一个模型Variance很高，意味着它往往很复杂，而复杂的模型往往会对某些样本点非常敏感，也就很可能Overfit。同样的，一个模型如果Bias很高，意味着他一直都很不准，所以Underfitting。而我们的目标则是在模型的复杂度之间找到一个平衡，从而使Bias 和Variance都尽可能低，从而得到一个Good Fitting的结果</p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20221213155957.png"></p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20221213155840.png"></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><h4 id="交叉熵-cross-entropy-loss-function"><a href="#交叉熵-cross-entropy-loss-function" class="headerlink" title="交叉熵 cross entropy loss function"></a>交叉熵 cross entropy loss function</h4><p>用于衡量两个分布之间的距离</p><p>逻辑回归</p><p>logLoss (对数损失函数，LR)</p><p>hinge loss (合页损失函数，SVM)</p><p>exp-loss (指数损失函数，AdaBoost)</p><p>cross-entropy loss (交叉熵损失函数，Softmax)</p><p>quadratic loss (平方误差损失函数，线性回归)</p><p>absolution loss (绝对值损失函数， )</p><p>0-1 loss (0-1损失函数)</p><h3 id="RMSE-vs-MSE"><a href="#RMSE-vs-MSE" class="headerlink" title="RMSE vs MSE"></a>RMSE vs MSE</h3><p>使用 MSE 作为损失函数时，误差的平方值被用于计算模型预测与实际值之间的差距。由于误差被平方，因此较大的误差将被放大，而这可能会导致模型过度关注那些误差较大的样本。这意味着，如果存在异常值，则模型将过度关注这些异常值而忽略其他样本。而使用 RMSE 作为损失函数时，可以避免这个问题，因为 RMSE 是对误差的平方根进行计算，这使得大误差的影响被降低，而小误差的影响则被放大。因此，RMSE 对于训练一个更健壮（robust）的回归模型来说是更好的选择。</p><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><h3 id="ROC-AUC-Sensitivity-Specificity"><a href="#ROC-AUC-Sensitivity-Specificity" class="headerlink" title="ROC, AUC, Sensitivity, Specificity"></a>ROC, AUC, Sensitivity, Specificity</h3><ul><li><strong>真阳性率（True Positive Rate，简称TPR）</strong>：TP&#x2F;(TP+FN)，代表的含义是：实际观测为<strong>阳</strong>的样本中，模型能够正确识别出来的比例。TPR又称为Sensitivity。</li><li><strong>真阴性率（True Negative Rate，简称TNR）</strong>：TN&#x2F;(FP+TN)，代表的含义是：实际观测为<strong>阴</strong>的样本中，模型能够正确识别出来的比例。TNR又称为Specificity。</li><li><strong>假阳性率（False Positive Rate，简称FPR）</strong>：FP&#x2F;(FP+TN)，代表的含义是：实际观测为<strong>阴</strong>的样本中，被模型错误地划分成阳性的比例。FPR&#x3D;1-Specificity。</li></ul><p><strong>TPR越高、FPR越低</strong>，说明模型的预测能力越好</p><p>以FPR为横坐标、TPR为纵坐标，将每一个阈值所对应的(FPR,TPR)放入坐标系中。用红色线条将所有的点连接起来——此即为<strong>ROC曲线</strong></p><p><img src="https://jkq-pic.oss-cn-shanghai.aliyuncs.com/img/20221213104352.png"></p><p><strong>AUC</strong>：ROC曲线下的面积</p><p>优点：不受正负样本比例的影响</p><p>缺点：</p><ul><li><p>对FPR和TPR两种错误的代价同等看待</p></li><li><p>没有给出模型误差的空间分布信息</p></li></ul><h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><p>SVM（支持向量机）是一种用于分类和回归分析的监督式学习算法，其原理可以用以下公式来解释：</p><p>对于一个二分类问题，假设有训练样本集D&#x3D;{（x1,y1），（x2,y2），…，（xn,yn）}，其中xi为输入变量，yi∈{+1,-1}为输出变量（类别标签）。SVM的目标是找到一个最优的超平面，将数据集D分成两个类别，使得不同类别之间的间隔最大化。该超平面由以下公式给出：</p><p>w·x+b&#x3D;0</p><p>其中，w是超平面的法向量（Normal vector），b是偏移量。对于输入变量x，它属于超平面上方的类别+1，否则为-1。</p><p>SVM的训练过程是通过最大化间隔来找到最优超平面。假设超平面距离正例样本最近点和负例样本最近点的距离之和为2M，则最大化间隔问题可以转化为以下凸优化问题：</p><p>max M</p><p>s.t. yi(w·xi+b)≥M, i&#x3D;1,2,…,n</p><p>||w||&#x3D;1</p><p>其中，第一个约束条件确保每个样本都位于超平面两侧，第二个约束条件保证法向量w为单位向量。通过求解上述凸优化问题，我们可以得到最优的超平面，使得数据集D被分为两个类别并且间隔最大。</p><p>在实际应用中，有时数据集可能无法用线性超平面分开，这时可以使用核函数将数据映射到高维空间中，使得数据集变得可分。SVM的核函数可以是线性核、多项式核、径向基函数（RBF）核等。</p><h3 id="SVM-vs-神经网络"><a href="#SVM-vs-神经网络" class="headerlink" title="SVM vs 神经网络"></a>SVM vs 神经网络</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111163052.png"></p><h3 id="SVN的”最大间隔”思想"><a href="#SVN的”最大间隔”思想" class="headerlink" title="SVN的”最大间隔”思想"></a>SVN的”最大间隔”思想</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111163533.png"></p><h3 id="对偶问题及其解的稀疏性"><a href="#对偶问题及其解的稀疏性" class="headerlink" title="对偶问题及其解的稀疏性"></a>对偶问题及其解的稀疏性</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111214930.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111215131.png"></p><ul><li>SVM解的稀疏性: 训练完成后, 大部分的训练样本都不需保留, 最终模型仅与支持向量有关</li></ul><h4 id="求解方法——SMO"><a href="#求解方法——SMO" class="headerlink" title="求解方法——SMO"></a>求解方法——SMO</h4><p>基本思路：不断执行如下两个步骤直至收敛</p><ol><li>选取一对需更新的变量$\alpha_i$和$\alpha_j$</li><li>固定$\alpha_i$和$\alpha_j$以外的参数, 求解<strong>对偶问题</strong>更新$\alpha_i$和$\alpha_j$</li></ol><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111215734.png"></p><h3 id="核函数——通过向高维空间映射解决线性不可分的问题"><a href="#核函数——通过向高维空间映射解决线性不可分的问题" class="headerlink" title="核函数——通过向高维空间映射解决线性不可分的问题"></a>核函数——通过向高维空间映射解决线性不可分的问题</h3><p>基本想法：不显式地设计核映射, 而是设计核函数</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111215945.png"></p><ul><li>Mercer定理(充分非必要)：只要一个<strong>对称函数</strong>所对应的核矩阵<strong>半正定</strong>, 则它就能作为核函数来使用</li></ul><h3 id="引入”软间隔”缓解特征空间中线性不可分的问题"><a href="#引入”软间隔”缓解特征空间中线性不可分的问题" class="headerlink" title="引入”软间隔”缓解特征空间中线性不可分的问题"></a>引入”软间隔”缓解特征空间中线性不可分的问题</h3><p>基本想法：最大化间隔的同时, 让不满足约束的样本应尽可能少</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111220305.png"></p><ul><li><p>替代损失：hinge函数：max(0, 1-z)</p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111221533.png"></p></li></ul><h3 id="将支持向量的思想应用到回归问题上得到支持向量回归"><a href="#将支持向量的思想应用到回归问题上得到支持向量回归" class="headerlink" title="将支持向量的思想应用到回归问题上得到支持向量回归"></a>将支持向量的思想应用到回归问题上得到支持向量回归</h3><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111222847.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111222905.png"></p><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111222938.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%A0%91/"/>
    <url>/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><ol><li>选择特征：选择最优特征作为当前节点的分裂特征。通常使用信息增益、基尼指数或卡方检验等方法来选择特征。</li><li>划分数据集：将数据集根据选定的特征值进行划分，生成子集。</li><li>递归构建子树：对于每个子集，重复步骤1和2，直到当前节点为叶子节点（即数据集中的所有实例属于同一类别），或满足预设的终止条件（例如达到树的最大深度、样本数量不足等）。</li><li>剪枝：通过剪枝来避免过拟合。通常有预剪枝和后剪枝两种方法。预剪枝是在构建过程中，设置一个阈值，若划分当前节点不能增加决策树的泛化能力，则停止划分。后剪枝是在构建完整个树之后，对树进行剪枝。具体做法是从下往上遍历树中的节点，对每个节点进行剪枝，计算剪枝后的准确率，选择准确率最高的方式进行剪枝。</li><li>测试决策树：用测试数据集来测试决策树的分类性能。通常采用交叉验证等方法来评估决策树的泛化能力。</li><li>使用决策树进行预测：用新数据样本来预测目标变量的值，通过遍历决策树的各个节点来决定样本的类别。</li></ol><h3 id="递归停止条件"><a href="#递归停止条件" class="headerlink" title="递归停止条件"></a>递归停止条件</h3><ul><li>当前结点包含的<strong>样本全部属于同一类别</strong></li><li>当前<strong>属性集为空</strong>， 或所有样本在<strong>所有属性上取值相同</strong></li><li>当前结点包含的<strong>样本集合为空</strong></li></ul><h3 id="决策树的分裂节点标准"><a href="#决策树的分裂节点标准" class="headerlink" title="决策树的分裂节点标准"></a>决策树的分裂节点标准</h3><h4 id="信息增益ID3"><a href="#信息增益ID3" class="headerlink" title="信息增益ID3"></a>信息增益ID3</h4><p>$$<br>Gain\left( D,a \right) &#x3D;Ent\left( D \right) -\sum_{v&#x3D;1}^V{\frac{\left| D^v \right|}{\left| D \right|}Ent\left( D^v \right)}<br>$$</p><p>不足：偏好<strong>取值数目较多</strong>的属性</p><h4 id="增益率"><a href="#增益率" class="headerlink" title="增益率"></a>增益率</h4><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111102456.png"></p><p>不足：偏好<strong>取值数目较少</strong>的属性</p><h5 id="C4-5"><a href="#C4-5" class="headerlink" title="C4.5"></a>C4.5</h5><ol><li>先找出<strong>信息增益高于平均水平</strong>的属性</li><li>从中选<strong>增益率最高</strong>的属性</li></ol><h4 id="基尼指数（min最优）"><a href="#基尼指数（min最优）" class="headerlink" title="基尼指数（min最优）"></a>基尼指数（min最优）</h4><p><img src="https://finclaw.oss-cn-shenzhen.aliyuncs.com/img/20210111103059.png"></p><ul><li>反映了从数据集中随机抽取两个样本，其类别标记不一致的概率</li></ul><ol><li><p>信息增益（Information Gain）</p><p> 信息增益是指根据特征属性将数据集分成若干子集后，得到的子集的信息不确定性减少的程度。在决策树中，信息增益越大的特征属性越优先被选择作为分裂节点。</p><p> 信息增益的计算公式为：$Gain(S, A) &#x3D; Entropy(S) - \sum_{v\in Values(A)}\frac{|S_v|}{|S|}Entropy(S_v)$</p><p> 其中，$S$表示原始数据集，$A$表示待分裂的特征属性，$Values(A)$表示特征属性$A$的可能取值，$S_v$表示取值为$v$的子集，$|S|$和$|S_v|$分别表示数据集$S$和$S_v$的样本数，$Entropy(S)$和$Entropy(S_v)$分别表示数据集$S$和$S_v$的信息熵。</p></li><li><p>基尼不纯度（Gini Impurity）</p><p> 基尼不纯度是指从数据集中随机选择两个样本，这两个样本在分类上的误差率。在决策树中，基尼不纯度越小的特征属性越优先被选择作为分裂节点。</p><p> 基尼不纯度的计算公式为：$Gini(S) &#x3D; \sum_{k&#x3D;1}^{K}\sum_{k’\neq k}p_kp_{k’} &#x3D; 1 - \sum_{k&#x3D;1}^{K}p_k^2$</p><p> 其中，$S$表示数据集，$K$表示类别数，$p_k$表示样本属于第$k$个类别的概率。</p><p> 需要注意的是，不同的分裂节点标准可能会得到不同的决策树结构，而选择合适的分裂节点标准取决于具体的问题和数据集。</p></li></ol><h3 id="ID3，C4-5，CART区别"><a href="#ID3，C4-5，CART区别" class="headerlink" title="ID3，C4.5，CART区别"></a>ID3，C4.5，CART区别</h3><p>D3、C4.5和CART都是决策树算法，它们的共同点是都可以用于分类和回归问题，都可以生成二叉决策树，并且都采用贪心的策略进行特征选择，即选择当前最优的特征作为分裂节点。</p><p>下面是它们的不同点：</p><ol><li><p>算法基础</p><p> ID3和C4.5基于信息论，采用信息增益和信息增益比来选择特征属性。而CART则是基于基尼不纯度，采用基尼指数来选择特征属性。</p></li><li><p>分类和回归</p><p> ID3和C4.5只能用于分类问题，而CART既可以用于分类也可以用于回归问题。</p></li><li><p>多叉树和二叉树</p><p> ID3和C4.5生成的决策树是多叉树，即一个节点可以有多个子节点。而CART生成的决策树是二叉树，即每个节点只有两个子节点。</p></li><li><p>连续特征处理</p><p> ID3和C4.5不支持处理连续特征，需要对连续特征进行离散化。而CART可以直接处理连续特征，通过选择一个阈值将连续特征转化为二元特征进行处理。</p></li><li><p>树的剪枝</p><p> C4.5和CART都支持对生成的决策树进行剪枝，以避免过拟合。而ID3没有剪枝过程。</p></li><li><p>Algorithm foundation</p><p> ID3 and C4.5 are based on information theory, using information gain and gain ratio to select feature attributes. CART, on the other hand, is based on Gini impurity and uses the Gini index to select feature attributes.</p></li><li><p>Classification and Regression</p><p> ID3 and C4.5 can only be used for classification problems, while CART can be used for both classification and regression problems.</p></li><li><p>Multi-way tree and binary tree</p><p> The decision tree generated by ID3 and C4.5 is a multi-way tree, meaning that a node can have multiple child nodes. In contrast, the decision tree generated by CART is a binary tree, meaning that each node has only two child nodes.</p></li><li><p>Continuous feature processing</p><p> ID3 and C4.5 do not support processing continuous features and require discretization of continuous features. CART can directly process continuous features by selecting a threshold to convert continuous features into binary features.</p></li><li><p>Tree pruning</p><p> C4.5 and CART both support pruning the generated decision tree to avoid overfitting, while ID3 does not have a pruning process.</p></li></ol><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>因为是非参数模型，不需要对样本进行预先假设，可以处理复杂样本。</li><li>计算速度快，结果可解释性强。</li><li>可以同时处理分类和预测问题，对缺失值不敏感。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>容易过拟合</li><li>特征之间存在相互关联时，数据结果表现较差。</li></ul><h4 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h4><ul><li><p>进行剪枝防止过拟合。</p><p>剪枝包括**预剪枝(Prepruning)<strong>和</strong>后剪枝(Postpruning),**前者通过对连续型变量设置阈值，来控制树的深度，或者控制节点的个数，在节点开始划分之前就进行操作，进而防止过拟合现象。后者是自底向上对非叶节点进行考察，如果这个内部节点换成叶节点能提升决策树的泛化能力，那就把它换掉。</p></li><li><p>运用交叉验证的方法选择合适的参数。</p></li><li><p>通过模型集成的方法（Bagging-parallel&#x2F;Boosting-serial），基于决策树构建更复杂的模型</p></li></ul><h2 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h2><h3 id="CART"><a href="#CART" class="headerlink" title="CART"></a>CART</h3><p>分割准则：分割后两个区域的MSE的和最小</p><p>假设$n$个样本$D&#x3D;{(x_1,y_1),(x_2,y_2),…,(x_n,y_n)}$，$x$是$d$维的（$d$个特征），选取第$i$个特征$d_i$的取值$s$作为划分两个区域的阈值,$R_1&#x3D;{y_i|x_{i,d_i}}\leq s$，$R_2&#x3D;{y_i|x_{i,d_i}}&gt; s$，每个区域内<strong>样本$y_i$的均值</strong>作为该区域的预测值，计算两个区域的样本真实值和预测值的平方误差之和。遍历每一个特征的每一个样本的取值，选择使得平方误差最小的取值，使用该值将样本分成两个区域，对这两个区域继续上面的步骤，一致递归生成，直到满足停止条件。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>选择最优切分变量$d_i$以及切分点$s$，求解<br>$$<br>\underset{d_i,s}{\min}{\underset{x_i\in R_1 (d_i, s)}{\min}(y_i-c_1)^2+\underset{x_i\in R_2 (d_i, s)}{\min}(y_i-c_2)^2}<br>$$<br>遍历所有的特征维度$d_i$ ，固定$d_i$，遍历样本在特征$d_i$处的取值s，使得式子最小。</p></li><li><p>根据选取的$(d_i,s)$将样本划分成两个区域，计算两个区域的平方误差</p></li><li><p>选取使得式（1）最小的$(d_i,s)$将样本划分成两个区域，每个区域的预测值是所有样本$y$值的均值（根据平方误差的导数为0可得）。</p></li><li><p>对于两个子区域继续调用1），2），3），直到满足停止条件。</p></li><li><p>最后划分为M个区域$R_1,R_2,…,R_m$，生成决策树<br>$$<br>f(x)&#x3D;\sum^M_{i&#x3D;1} c_iI(x\in R_i)<br>$$</p></li></ol><h2 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h2><h4 id="预剪枝（边建树，边剪枝）"><a href="#预剪枝（边建树，边剪枝）" class="headerlink" title="预剪枝（边建树，边剪枝）"></a>预剪枝（边建树，边剪枝）</h4><p>决策树生成过程中，对每个结点在划分前先进行估计，若当前结点的划分不能带来决策树泛化性能提升，则停止划分并将当前结点记为叶结点，其类别标记为训练样例数最多的类别</p><ol><li>针对上述数据集，基于信息增益准则，选取属性v划分训练集。</li><li>分别计算划分前（即直接将该结点作为叶结点）及划分后的验证集精度，判断是否需要划分。</li><li>若划分后能提高验证集精度，则划分，对划分后的属性，执行同样判断；否则，不划分</li></ol><p>优点：</p><ul><li>降低过拟合风险</li><li>显著减少训练时间和测试时间开销</li></ul><p>缺点：</p><ul><li><strong>欠拟合</strong>风险：有些分支的当前划分虽然不能提升泛化性能，但在其基础上进行的后续划分却有可能导致性能显著提高。</li><li>预剪枝基于“贪心”本质禁止这些分支展开，带来了欠拟合风险</li></ul><h4 id="后剪枝（先建树，后剪枝）"><a href="#后剪枝（先建树，后剪枝）" class="headerlink" title="后剪枝（先建树，后剪枝）"></a>后剪枝（先建树，后剪枝）</h4><p>优点：</p><ul><li>后剪枝比预剪枝保留了更多的分支，欠拟合风险小 ，<strong>泛化性能</strong>往往优于预剪枝决策树</li></ul><p>缺点：</p><ul><li><strong>训练时间开销大</strong>：后剪枝过程是在生成完全决策树之后进行的，需要自底向上对所有非叶结点逐一考察；其训练时间要远大于预剪枝决策树</li></ul><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><h4 id="缺失值处理-1"><a href="#缺失值处理-1" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><h5 id="在属性缺失的情况下，选择划分属性"><a href="#在属性缺失的情况下，选择划分属性" class="headerlink" title="在属性缺失的情况下，选择划分属性"></a>在属性缺失的情况下，选择划分属性</h5><ul><li>跟传统决策树⼀致，只不过仅在有属性值的子集上计算信息增益，不考虑无属性值的样本</li></ul><p>$$<br>Gain\left( D,a \right) &#x3D;\rho \times Gain\left( \tilde{D},a \right)<br>$$</p><h5 id="给定划分属性，若样本在该属性上的值缺失，如何对该样本进行划分？"><a href="#给定划分属性，若样本在该属性上的值缺失，如何对该样本进行划分？" class="headerlink" title="给定划分属性，若样本在该属性上的值缺失，如何对该样本进行划分？"></a>给定划分属性，若样本在该属性上的值缺失，如何对该样本进行划分？</h5><ul><li>让同⼀个样本以不同的概率划入到不同的子节点中去</li></ul><h2 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h2><h3 id="XGBoost特征重要性"><a href="#XGBoost特征重要性" class="headerlink" title="XGBoost特征重要性"></a>XGBoost特征重要性</h3><ol><li><p>基于覆盖次数的特征重要性</p><p> 在 XGBoost 中，每个决策树都会选择最佳特征进行划分，因此可以根据每个特征在决策树中被使用的次数来计算特征重要性。具体来说，特征的覆盖次数可以通过计算所有决策树中该特征被使用的次数之和来获得。XGBoost 将所有特征的覆盖次数标准化并转换为百分比，以便比较它们的重要性。</p></li><li><p>基于特征分裂次数的特征重要性</p><p> 除了覆盖次数之外，XGBoost 还可以基于特征分裂的平均增益来计算特征重要性。对于每个决策树，XGBoost 都会计算每个特征的分裂增益，即将特征用作分裂点后目标变量的下降量。然后，XGBoost 将每个特征的分裂增益加权平均，以获得该特征的平均分裂增益。最后，XGBoost 将所有特征的平均分裂增益标准化并转换为百分比，以便比较它们的重要性。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>聚类</title>
    <link href="/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%81%9A%E7%B1%BB/"/>
    <url>/2023/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%81%9A%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>基于划分 partition</li><li>基于层次 hierarchical</li><li>基于密度 density-based</li><li>基于网格</li><li>基于模型 model-based</li></ul><h3 id="基于划分"><a href="#基于划分" class="headerlink" title="基于划分"></a>基于划分</h3><ul><li><p>代表算法：K-means</p></li><li><p>优点：收敛速度快</p></li><li><p>缺点：要求类别数目 k 可以合理地估计，并且初始中心的选择和噪声会对聚类结果产生很大影响</p></li></ul><h4 id="K-means-vs-KNN"><a href="#K-means-vs-KNN" class="headerlink" title="K-means vs KNN"></a>K-means vs KNN</h4><ul><li><p>K-means：聚类，无监督</p><ol><li>随机选择k个样本作为初始聚类中心 a&#x3D;a1,a2,…ak ；</li><li>针对数据集中每个样本$x_i$ 计算它到 k 个聚类中心的距离并将其分到距离最小的聚类中心所对应的类中；</li><li>针对每个类别$a_j$ ，重新计算它的聚类中心$a_j&#x3D;\frac{1}{|ci|}\sum \limits_{x∈c_i}x$（即属于该类的所有样本的质心）；</li><li>重复上面2、3两步，直到达到某个中止条件（迭代次数、最小误差变化等）</li></ol><p>优点：</p><ul><li>容易理解，聚类效果不错，虽然是局部最优， 但往往局部最优就够了；</li><li>处理大数据集的时候，该算法可以保证较好的伸缩性；</li><li>当簇近似高斯分布的时候，效果非常不错；</li><li>算法复杂度低。</li></ul><p>缺点：</p><ul><li>K 值需要人为设定，不同 K 值得到的结果不一样；</li><li>对初始的簇中心敏感，不同选取方式会得到不同结果；</li><li>对异常值敏感；</li><li>不适合太离散的分类、样本类别不平衡的分类、非凸形状的分类。</li></ul></li><li><p>KNN：分类&#x2F;回归，有监督</p><p>将预测点与所有点距离进行计算，然后保存并排序，选出前面K个值看看哪些类别比较多，则预测的点属于哪类</p><p>优点：</p><ul><li>简单易用，相比其他算法，KNN算是比较简洁明了的算法。即使没有很高的数学基础也能搞清楚它的原理。</li><li>模型训练时间快，上面说到KNN算法是惰性的，这里也就不再过多讲述。<br>预测效果好。</li><li>对异常值不敏感</li></ul><p>缺点：</p><ul><li>对内存要求较高，因为该算法存储了所有训练数据</li><li>对不相关的功能和数据规模敏感</li></ul></li></ul><h4 id="KNN-K值选取"><a href="#KNN-K值选取" class="headerlink" title="KNN-K值选取"></a>KNN-K值选取</h4><p>从选取一个较小的K值开始，不断增加K的值，然后计算验证集合的方差，最终找到一个比较合适的K值</p><h3 id="基于层次"><a href="#基于层次" class="headerlink" title="基于层次"></a>基于层次</h3><p>对给定的数据进行层次分解，直到满足某种条件为止。分为自底向上法（AGNES）和自顶向下法（DIANA）</p><ul><li>优点：距离和规则的相似度容易定义，限制少，不需要预先制定簇的个数，可以发现簇的层次关系</li><li>缺点：计算复杂度太高，奇异值也能产生很大影响，算法很可能聚类成链状</li></ul><h3 id="基于密度"><a href="#基于密度" class="headerlink" title="基于密度"></a>基于密度</h3><p>寻找被低密度区域分离的高密度区域。与基于距离的聚类算法不同的是，基于距离的聚类算法的聚类结果是球状（凸）的簇，而基于密度的聚类算法可以发现任意形状的簇。基于密度的聚类方法是从数据对象分布区域的密度着手的。如果给定类中的数据对象在给定的范围区域中，则数据对象的密度超过某一阈值就继续聚类。这种方法通过连接密度较大的区域，能够形成不同形状的簇，而且可以消除孤立点和噪声对聚类质量的影响，以及发现任意形状的簇</p><h4 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h4><p>DBSCAN（Density-Based Spatial Clustering of Applications with Noise）是一种基于密度的聚类算法，它能够将具有高密度的样本聚集成簇，并可以识别出异常点（噪声）。</p><p>DBSCAN的基本原理是将数据集中的样本点分为三类：核心点（Core Point）、边界点（Border Point）和噪声点（Noise Point）。其中核心点是在一个给定半径ε内含有不少于MinPts个样本的点；边界点是在半径ε内含有少于MinPts个样本的点，但是该点距离核心点不超过ε；噪声点是既不是核心点也不是边界点的点。该算法的聚类过程如下：</p><ol><li>任选一个未被访问过的点，以该点为中心，半径为ε构建一个以该点为核心点的邻域；</li><li>如果该邻域内包含不少于MinPts个点，则该邻域内的所有点被标记为同一簇，同时这些点也是核心点，然后进入下一步继续扩展该簇；</li><li>如果该邻域内包含少于MinPts个点，则该点被标记为边界点，并跳过该点，重复步骤1；</li><li>如果该点为噪声点，则直接跳过该点，重复步骤1。</li></ol><p>扩展簇的方法为：</p><ol><li>以核心点为中心，以半径ε构建以该核心点为中心的邻域；</li><li>遍历该邻域内所有的点，如果该点未被访问过，则将该点标记为该簇的一个成员，并检查该点是否为核心点；</li><li>如果该点为核心点，则继续以该点为中心，以半径ε构建以该点为中心的邻域，并将该邻域内的所有点都加入该簇；</li><li>如果该点为边界点，则将该点加入该簇，并不再扩展该点。</li></ol><p>重复以上过程，直到所有点都被访问过为止。DBSCAN算法的核心思想是：一个簇是一些密度相连的点的集合，这个集合与其他的密度相连的点的集合是分开的。同时，该算法能够识别出噪声点，避免了噪声点对聚类结果的干扰。</p><h4 id="OPTICS"><a href="#OPTICS" class="headerlink" title="OPTICS"></a>OPTICS</h4><p>OPTICS（Ordering Points To Identify the Clustering Structure）是一种密度聚类算法，用于发现任意形状和任意密度的聚类结构。它可以处理高维数据和噪声数据，同时不需要预先指定簇的数量。</p><p>OPTICS算法的主要思想是，对于每个数据点，通过计算其与周围点的距离来评估其密度，并根据密度大小将其分类为核心点、边界点或噪声点。接着，从核心点开始构建聚类簇，通过对距离和密度进行扫描，将相邻的核心点分配到同一个簇中。最终，OPTICS算法可以得到一个聚类结构图，其中每个簇对应一个局部密度较高的区域。</p><p>OPTICS算法有一些优点。首先，它可以自适应地发现不同形状和密度的聚类结构，而不需要事先知道簇的数量。其次，它可以处理噪声数据和高维数据。此外，它不需要预先设置距离阈值，因此可以灵活地处理不同密度的数据。</p><p>然而，OPTICS算法也存在一些缺点。首先，它的计算复杂度较高，因此对于大规模数据集，其性能可能较差。其次，其结果可能受到参数设置的影响，例如邻域大小等。因此，在使用OPTICS算法时，需要根据具体情况进行参数调整和结果评估。</p><h3 id="基于网格"><a href="#基于网格" class="headerlink" title="基于网格"></a>基于网格</h3><p>将空间量化为有限数目的单元，可以形成一个网格结构，所有聚类都在网格上进行。基本思想就是将每个属性的可能值分割成许多相邻的区间，并创建网格单元的集合。每个对象落入一个网格单元，网格单元对应的属性空间包含该对象的值</p><ul><li>优点：处理速度快，其处理时间独立于数据对象数，而仅依赖于量化空间中的每一维的单元数</li><li>缺点：只能发现边界是水平或垂直的簇，而不能检测到斜边界。另外，在处理高维数据时，网格单元的数目会随着属性维数的增长而成指数级增长</li></ul><h3 id="基于模型"><a href="#基于模型" class="headerlink" title="基于模型"></a>基于模型</h3><p>试图优化给定的数据和某些数学模型之间的适应性的。该方法给每一个簇假定了一个模型，然后寻找数据对给定模型的最佳拟合。假定的模型可能是代表数据对象在空间分布情况的密度函数或者其他函数。这种方法的基本原理就是假定目标数据集是由一系列潜在的概率分布所决定的。簇的数目是基于标准的统计数字自动决定的，噪声或孤立点也是通过统计数字来分析的。基于模型的聚类方法试图优化给定的数据和某些数据模型之间的适应性</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
